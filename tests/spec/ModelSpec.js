// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  describe("Model", function() {
    var TestModel, model, _ref;
    model = null;
    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        _ref = TestModel.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestModel.field("a", {
        "default": false
      });

      TestModel.field("b", {
        "default": true
      });

      TestModel.field("t", {
        "default": '',
        type: new Wraith.Validators.Text({
          min: 0,
          max: 5
        })
      });

      TestModel.field("n", {
        "default": 0,
        type: new Wraith.Validators.Num({
          min: 0,
          max: 5
        })
      });

      return TestModel;

    })(Wraith.Model);
    beforeEach(function() {
      return model = new TestModel();
    });
    it("should have get and set functions", function() {
      expect(model.get).toBeFunction();
      return expect(model.set).toBeFunction();
    });
    describe("on creation", function() {
      it("should have getters for each field", function() {
        expect(model.get('a')).toExist();
        return expect(model.get('b')).toExist();
      });
      it("should have defaults for each field", function() {
        expect(model.get('a')).toBe(false);
        return expect(model.get('b')).toBe(true);
      });
      return it("should be initialized with custom data", function() {
        var model_;
        model_ = new TestModel({
          a: true,
          b: false
        });
        expect(model_.get('a')).toBe(true);
        return expect(model_.get('b')).toBe(false);
      });
    });
    describe("on set", function() {
      it("should update the field to the desired value", function() {
        expect(model.get('a')).toBe(false);
        model.set('a', true);
        return expect(model.get('a')).toBe(true);
      });
      it("should emit a generic change event", function() {
        var val;
        val = false;
        model.bind('change', function() {
          return val = true;
        });
        model.set('a', true);
        return waitsFor((function() {
          return val === true;
        }), 1);
      });
      it("should emit an explicit change event", function() {
        var val;
        val = false;
        model.bind('change:a', function() {
          return val = true;
        });
        model.set('a', true);
        return waitsFor((function() {
          return val === true;
        }), 1);
      });
      it("should validate Wraith.Validators.Num typed fields and enforce min, max, and numbers", function() {
        model.reset();
        model.set('n', -1);
        expect(model.isValid()).toBe(false);
        model.set('n', 0);
        expect(model.isValid()).toBe(true);
        model.set('n', 5);
        expect(model.isValid()).toBe(true);
        model.set('n', 6);
        expect(model.isValid()).toBe(false);
        model.set('n', 'gooby');
        expect(model.isValid()).toBe(false);
        model.set('n', 3);
        return expect(model.isValid()).toBe(true);
      });
      return it("should validate Wraith.Validators.Text typed fields and enforce min, and max character lengths", function() {
        model.reset();
        model.set('t', 'go');
        expect(model.isValid()).toEqual(true);
        model.set('t', 'gooby!');
        expect(model.isValid()).toEqual(false);
        model.set('t', 'gooby');
        return expect(model.isValid()).toEqual(true);
      });
    });
    return describe("on reset", function() {
      return it("should reset all properties", function() {
        model.reset();
        expect(model.get('a')).toBe(false);
        expect(model.get('b')).toBe(true);
        expect(model.get('n')).toBe(0);
        return expect(model.get('t')).toBe('');
      });
    });
  });

}).call(this);
