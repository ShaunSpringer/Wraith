// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  describe("Collection", function() {
    var TestItem, TestList, items, model;
    model = null;
    items = null;
    TestItem = (function(_super) {

      __extends(TestItem, _super);

      function TestItem() {
        return TestItem.__super__.constructor.apply(this, arguments);
      }

      TestItem.field('a', {
        "default": false
      });

      TestItem.field('b', {
        "default": true
      });

      return TestItem;

    })(Wraith.Model);
    TestList = (function(_super) {

      __extends(TestList, _super);

      function TestList() {
        return TestList.__super__.constructor.apply(this, arguments);
      }

      TestList.field('a', {
        "default": false
      });

      TestList.field('b', {
        "default": true
      });

      TestList.hasMany(TestItem, 'items');

      return TestList;

    })(Wraith.Model);
    beforeEach(function() {
      model = new TestList();
      return items = model.get('items');
    });
    describe("on item create", function() {
      it("should create a new model w/defaults", function() {
        var item;
        item = items.create({});
        expect(items.all().length).toBe(1);
        expect(item.get('a')).toBe(false);
        return expect(item.get('b')).toBe(true);
      });
      it("should create a new model w/data", function() {
        var item;
        item = items.create({
          a: true,
          b: false
        });
        expect(items.all().length).toBe(1);
        expect(item.get('a')).toBe(true);
        return expect(item.get('b')).toBe(false);
      });
      it("should emit a generic change event", function() {
        var results;
        results = false;
        model.bind('change', function(key, val) {
          return results = {
            key: key,
            val: val
          };
        });
        items.create({});
        return waitsFor((function() {
          return results !== false;
        }), 100);
      });
      return it("should emit an explicit change event", function() {
        var results;
        results = false;
        model.bind('change:items', function(key, val) {
          return results = {
            key: key,
            val: val
          };
        });
        items.create({});
        return waitsFor((function() {
          return results !== false;
        }), 100);
      });
    });
    describe("on item change", function() {
      var item;
      item = null;
      beforeEach(function() {
        return item = items.create({});
      });
      it("should emit a generic change event", function() {
        var results;
        results = false;
        model.bind('change', function(key, val) {
          return results = {
            key: key,
            val: val
          };
        });
        item.set('a', true);
        return waitsFor((function() {
          return results !== false;
        }), 100);
      });
      return it("should emit an explicit change event w/key and value of change", function() {
        var results;
        results = false;
        model.bind('change:items', function(key, val) {
          return results = {
            key: key,
            val: val
          };
        });
        item.set('a', true);
        return waitsFor((function() {
          return results.key === 'a' && results.val === true;
        }), 100);
      });
    });
    return describe("on item remove", function() {
      var item;
      item = null;
      beforeEach(function() {
        return item = items.create({});
      });
      it("should emit a generic change event", function() {
        var results;
        results = false;
        model.bind('change', function() {
          return results = true;
        });
        items.remove(item.get('_id'));
        return waitsFor((function() {
          return results !== false;
        }), 100);
      });
      it("should emit a generic remove event", function() {
        var results;
        results = false;
        model.bind('remove', function(item_) {
          return results = item_;
        });
        items.remove(item.get('_id'));
        return waitsFor((function() {
          return results === item;
        }), 100);
      });
      return it("should emit an explicit remove event", function() {
        var results;
        results = false;
        model.bind('remove:items', function(item_) {
          return results = item_;
        });
        items.remove(item.get('_id'));
        return waitsFor((function() {
          return results === item;
        }), 100);
      });
    });
  });

}).call(this);
