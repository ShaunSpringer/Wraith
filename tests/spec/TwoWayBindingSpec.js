// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  describe("Two Way Binding", function() {
    beforeEach(function() {
      if (window.TwoWayBindingTest) {
        return;
      }
      return $.ajax({
        async: false,
        dataType: 'html',
        url: 'fixtures/twowaybinding.html',
        success: function(data) {
          var _ref, _ref1, _ref2;

          $('#fixture').append($(data));
          window.TwoWayBindingTest = {};
          TwoWayBindingTest.Comment = (function(_super) {
            __extends(Comment, _super);

            function Comment() {
              _ref = Comment.__super__.constructor.apply(this, arguments);
              return _ref;
            }

            Comment.field('comment', {
              "default": ''
            });

            return Comment;

          })(Wraith.Model);
          TwoWayBindingTest.CommentList = (function(_super) {
            __extends(CommentList, _super);

            function CommentList() {
              _ref1 = CommentList.__super__.constructor.apply(this, arguments);
              return _ref1;
            }

            CommentList.hasMany(TwoWayBindingTest.Comment, 'comments');

            return CommentList;

          })(Wraith.Model);
          TwoWayBindingTest.CommentController = (function(_super) {
            __extends(CommentController, _super);

            function CommentController() {
              _ref2 = CommentController.__super__.constructor.apply(this, arguments);
              return _ref2;
            }

            CommentController.prototype.init = function() {
              CommentController.__super__.init.call(this);
              return this.list = this.registerModel(new TwoWayBindingTest.CommentList, 'commentlist');
            };

            return CommentController;

          })(Wraith.Controller);
          return new Wraith.Bootloader();
        }
      });
    });
    return describe("form inputs", function() {
      it("should update model and view on change", function() {
        var $input;

        $input = $('input[name=comment]');
        $input[0].value = 'Super!';
        $input.trigger('keyup');
        return waitsFor((function() {
          return $('#comment').text() === 'Comment: Super!';
        }), 1);
      });
      return it("should create a new model on submit", function() {
        var $form, $input;

        $input = $('input[name=comment]');
        $input[0].value = 'Super!';
        $input.trigger('keyup');
        $form = $('#comments-form');
        $form.submit();
        return waitsFor((function() {
          return $('#comment-list').first().text() === 'Super!';
        }), 1);
      });
    });
  });

}).call(this);
