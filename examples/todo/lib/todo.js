// Generated by CoffeeScript 1.4.0
(function() {
  var root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Wraith.Models.ListItem = (function(_super) {

    __extends(ListItem, _super);

    function ListItem() {
      return ListItem.__super__.constructor.apply(this, arguments);
    }

    ListItem.field('text', {
      "default": 'New Item'
    });

    ListItem.field('selected', {
      "default": false
    });

    return ListItem;

  })(Wraith.Model);

  Wraith.Models.List = (function(_super) {

    __extends(List, _super);

    function List() {
      return List.__super__.constructor.apply(this, arguments);
    }

    List.hasMany(Wraith.Models.ListItem, {
      as: 'items'
    });

    return List;

  })(Wraith.Model);

  Wraith.Controllers.TodoManager = (function(_super) {

    __extends(TodoManager, _super);

    function TodoManager() {
      this.itemToggle = __bind(this.itemToggle, this);

      this.itemDelete = __bind(this.itemDelete, this);

      this.inputKeypress = __bind(this.inputKeypress, this);
      return TodoManager.__super__.constructor.apply(this, arguments);
    }

    TodoManager.prototype.view_events = [
      {
        type: 'keypress',
        selector: 'input[type=text]',
        cb: 'inputKeypress'
      }, {
        type: 'change',
        selector: '.input[type=checkbox]',
        cb: 'itemToggle'
      }, {
        type: 'click',
        selector: 'div.delete',
        cb: 'itemDelete'
      }
    ];

    TodoManager.prototype.init = function() {
      var items, list;
      TodoManager.__super__.init.call(this);
      this.registerModel('list', new Wraith.Models.List);
      list = this.models['list'];
      items = list.get('items');
      items.create({
        text: 'Task 1',
        selected: true
      });
      items.create({
        text: 'Task 2'
      });
      return items.create({
        text: 'Task 3'
      });
    };

    TodoManager.prototype.inputKeypress = function(e) {
      var list, val;
      if (!(e.keyCode === 13 && (val = e.currentTarget.value) !== '')) {
        return;
      }
      list = this.models['list'];
      list.get('items').create({
        text: val,
        selected: false
      });
      return e.currentTarget.value = '';
    };

    TodoManager.prototype.itemDelete = function(e) {
      var $view, id, items, list;
      $view = this.findViewByElement(e.currentTarget);
      id = this.findIdByView($view);
      list = this.models['list'];
      items = list.get('items');
      return items.remove(id);
    };

    TodoManager.prototype.itemToggle = function(e) {
      var $view, id, item, items, list;
      $view = this.findViewByElement(e.currentTarget);
      id = this.findIdByView($view);
      list = this.models['list'];
      items = list.get('items');
      item = items.findById(id);
      return item.set('selected', !item.get('selected'));
    };

    return TodoManager;

  })(Wraith.Controller);

  Wraith.Views.SelectList = (function(_super) {

    __extends(SelectList, _super);

    function SelectList() {
      return SelectList.__super__.constructor.apply(this, arguments);
    }

    return SelectList;

  })(Wraith.View);

}).call(this);
