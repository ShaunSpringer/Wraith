// Generated by CoffeeScript 1.4.0
(function() {
  var root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  this.Wraith = {
    DEBUG: true,
    Controllers: [],
    controllers: {},
    Collections: [],
    Models: [],
    models: [],
    Templates: [],
    Views: [],
    UIEvents: ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'scroll', 'keypress', 'keyup', 'keydown', 'change', 'blur', 'focus'],
    isFunction: function(obj) {
      return Object.prototype.toString.call(obj) === '[object Function]';
    },
    delay: function(ms, func) {
      return setTimeout(func, ms);
    },
    escapeRegExp: function(string) {
      return string.replace(/([.*+?^${}()|[\]\/\\])/g, '\\$1');
    },
    templateSettings: {
      start: '<%',
      end: '%>',
      interpolate: /<%=(.+?)%>/g
    },
    compile: function(template) {
      var c, endMatch, fn;
      c = Wraith.templateSettings;
      endMatch = new RegExp("'(?=[^" + c.end.substr(0, 1) + "]*" + Wraith.escapeRegExp(c.end) + ")", "g");
      fn = new Function('obj', 'var p=[],print=function(){p.push.apply(p,arguments);};' + 'with(obj||{}){p.push(\'' + template.replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/\t/g, '\\t').replace(endMatch, "✄").split("'").join("\\'").split("✄").join("'").replace(c.interpolate, "',$1,'").split(c.start).join("');").split(c.end).join("p.push('") + "');}return p.join('');");
      return fn;
    },
    unescapeHTML: function(html) {
      var htmlNode;
      htmlNode = document.createElement("DIV");
      htmlNode.innerHTML = html;
      if (htmlNode.innerText !== void 0) {
        return htmlNode.innerText;
      }
      return htmlNode.textContent;
    },
    uniqueId: function(length, prefix) {
      var id;
      if (length == null) {
        length = 16;
      }
      if (prefix == null) {
        prefix = "wraith-";
      }
      id = "";
      while (id.length < length) {
        id += Math.random().toString(36).substr(2);
      }
      id.substr(0, length);
      return id = prefix + id;
    }
  };

  this.Wraith.Bootloader = (function() {

    function Bootloader() {
      var controller, id, _ref,
        _this = this;
      $('script[type="text/template"]').forEach(function(item) {
        return _this.loadTemplate($(item));
      });
      $('[data-controller]').forEach(function(item) {
        return _this.loadController($(item).data('controller'), $(item));
      });
      _ref = Wraith.controllers;
      for (id in _ref) {
        controller = _ref[id];
        controller.init();
      }
      this;

    }

    Bootloader.prototype.loadController = function(id, $item) {
      var Controller, controller;
      if (!(Controller = Wraith.Controllers[id])) {
        throw Error('Controller does not exist');
      }
      controller = new Controller($item);
      return Wraith.controllers[controller.id] = controller;
    };

    Bootloader.prototype.loadTemplate = function($template) {
      var id, template;
      if (!$template) {
        throw Error('Template is invalid');
      }
      id = $template.attr('id');
      template = $template.html();
      return Wraith.Templates[id] = new Wraith.Template(template);
    };

    /*
      loadView: (id, $view) ->
        $controller = $view.closest('[data-controller]')
        throw Error('Views must be defined inside of a controller.') unless $controller.length > 0
    
        id = $controller.data('id')
        controller = Wraith.controllers[id]
        throw Error('Controller instance not found.') unless controller
    
        View = Wraith.Views[id] ? Wraith.View
        controller.registerView(new View($view))
    */


    return Bootloader;

  })();

  this.Wraith.Base = (function() {

    function Base() {
      this.emit = __bind(this.emit, this);

      this.unbind = __bind(this.unbind, this);

      this.bind = __bind(this.bind, this);
      this.listeners = {};
    }

    Base.prototype.bind = function(ev, cb) {
      var list, _base, _ref;
      if (!Wraith.isFunction(cb)) {
        throw Error('Callback is not a function');
      }
      list = (_ref = (_base = this.listeners)[ev]) != null ? _ref : _base[ev] = [];
      list.push(cb);
      return this;
    };

    Base.prototype.unbind = function(ev, cb) {
      var callback, i, list, _i, _len, _ref;
      list = (_ref = this.listeners) != null ? _ref[ev] : void 0;
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        callback = list[i];
        if (!(callback === cb)) {
          continue;
        }
        list.slice();
        list.splice(i, 1);
        this.listeners[ev] = list;
        break;
      }
      return this;
    };

    Base.prototype.emit = function() {
      var args, event, listener, _i, _len, _ref, _results;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.listeners[event] != null) {
        _ref = this.listeners[event];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          _results.push(listener.apply(null, args));
        }
        return _results;
      }
    };

    return Base;

  })();

  this.Wraith.Validator = (function() {

    function Validator() {}

    Validator.STRING = 'string';

    Validator.is = function(obj, type) {
      if (typeof obj === type || obj instanceof type) {

      }
    };

    Validator.isString = function(obj) {
      return this.is(obj, this.STRING);
    };

    return Validator;

  })();

  this.Wraith.Collection = (function(_super) {

    __extends(Collection, _super);

    function Collection(parent, as, klass) {
      this.parent = parent;
      this.as = as;
      this.klass = klass;
      this.findById = __bind(this.findById, this);

      this.at = __bind(this.at, this);

      this.length = __bind(this.length, this);

      this.all = __bind(this.all, this);

      this.remove = __bind(this.remove, this);

      this.add = __bind(this.add, this);

      this.create = __bind(this.create, this);

      this.members = [];
    }

    Collection.prototype.create = function(attr) {
      return this.add(new this.klass(attr));
    };

    Collection.prototype.add = function(item) {
      this.members.push(item);
      this.parent.emit('add:' + this.as, item);
      return item;
    };

    Collection.prototype.remove = function(id) {
      var i, item, _i, _len, _ref;
      _ref = this.members;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (!(item.get('_id') === id)) {
          continue;
        }
        this.parent.emit('remove:' + this.as, item);
        this.members.splice(i, 1);
        break;
      }
      return this;
    };

    Collection.prototype.all = function() {
      return this.members;
    };

    Collection.prototype.length = function() {
      return this.members.length;
    };

    Collection.prototype.at = function(index) {
      return this.members[index];
    };

    Collection.prototype.findById = function(id) {
      var i, item, _i, _len, _ref;
      _ref = this.members;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (item.get('_id') === id) {
          return item;
        }
      }
    };

    return Collection;

  })(Wraith.Base);

  this.Wraith.Model = (function(_super) {

    __extends(Model, _super);

    Model.field = function(name, opt) {
      var _ref;
      if ((_ref = this.fields) == null) {
        this.fields = {};
      }
      return this.fields[name] = opt != null ? opt : {};
    };

    Model.hasMany = function(klass, opt) {
      var _ref, _ref1;
      if (opt == null) {
        opt = {};
      }
      if ((_ref = opt.klass) == null) {
        opt.klass = klass;
      }
      if ((_ref1 = this.collections) == null) {
        this.collections = {};
      }
      return this.collections[opt.as] = opt;
    };

    function Model(attributes) {
      this.toJSON = __bind(this.toJSON, this);

      this.set = __bind(this.set, this);

      this.get = __bind(this.get, this);

      var d, name, options, _base, _ref, _ref1, _ref2;
      Model.__super__.constructor.call(this);
      if ((_ref = (_base = this.constructor).fields) == null) {
        _base.fields = {};
      }
      if (!(attributes != null ? attributes['_id'] : void 0)) {
        this.constructor.fields['_id'] = {
          "default": Wraith.uniqueId
        };
      }
      this.listeners = {};
      this.attributes = {};
      _ref1 = this.constructor.fields;
      for (name in _ref1) {
        options = _ref1[name];
        if ((attributes != null ? attributes[name] : void 0) != null) {
          d = attributes != null ? attributes[name] : void 0;
        } else {
          d = Wraith.isFunction(options["default"]) ? options["default"]() : options["default"];
        }
        this.set(name, d);
      }
      _ref2 = this.constructor.collections;
      for (name in _ref2) {
        options = _ref2[name];
        this.attributes[name] = new Wraith.Collection(this, options.as, options.klass);
      }
      Wraith.models[this.attributes['_id']] = this;
      this;

    }

    Model.prototype.get = function(key) {
      var _ref;
      return (_ref = this.attributes) != null ? _ref[key] : void 0;
    };

    Model.prototype.set = function(key, val) {
      var field;
      if (!(field = this.constructor.fields[key])) {
        throw Error('Trying to set an non-existent property!');
      }
      if (val === this.get(key)) {
        return;
      }
      this.attributes[key] = val;
      this.emit('change', key, val);
      return this.emit("change:" + key, val);
    };

    Model.prototype.toJSON = function() {
      return this.attributes;
    };

    return Model;

  })(Wraith.Base);

  this.Wraith.Template = (function(_super) {

    __extends(Template, _super);

    function Template(template, wrap) {
      this.template = template;
      if (wrap == null) {
        wrap = true;
      }
      if (Wraith.DEBUG) {
        console.log('@Wraith.Template', 'constructor');
      }
      if (!this.template) {
        throw Error('Template is required');
      }
      if (wrap) {
        this.template = '<div wraith-view data-id="<%=_id%>">' + this.template + '</div>';
      }
      this.template_fn = Wraith.compile(this.template);
    }

    Template.prototype.render = function(data) {
      return this.template_fn(data.toJSON());
    };

    return Template;

  })(Wraith.Base);

  this.Wraith.View = (function(_super) {

    __extends(View, _super);

    function View($el) {
      this.$el = $el;
      this.removeView = __bind(this.removeView, this);

      this.updateView = __bind(this.updateView, this);

      this.createView = __bind(this.createView, this);

      if (Wraith.DEBUG) {
        console.log('@Wraith.View', 'constructor');
      }
      View.__super__.constructor.call(this);
      this.id = Wraith.uniqueId();
      this.init();
    }

    View.prototype.init = function() {
      if (Wraith.DEBUG) {
        return console.log('@Wraith.View', 'init', this);
      }
    };

    View.prototype.createView = function(model, map) {
      var $view, Template, template,
        _this = this;
      if (Wraith.DEBUG) {
        console.log('@Wraith.View', 'createView', this);
      }
      if (!($view = map.$view)) {
        return;
      }
      if (!(template = map.template)) {
        return;
      }
      if (!(Template = Wraith.Templates[template])) {
        Template = Wraith.Templates[template] = new Wraith.Template(template, false);
        $view.replaceWith(Template.render(model));
      } else {
        $view.append(Template.render(model));
      }
      (function(model, map) {
        return model.bind('change', function(model_) {
          return _this.updateView(model, map);
        });
      })(model, map);
      return this.updateView(model, map);
    };

    View.prototype.updateView = function(model, map) {
      var $view, Template, template;
      if (Wraith.DEBUG) {
        console.log('@Wraith.View', 'updateView', this);
      }
      if (!($view = map.$view)) {
        return;
      }
      if (!(template = map.template)) {
        return;
      }
      if (!(Template = Wraith.Templates[template])) {
        return;
      }
      $view = $('[data-id=' + model.get('_id') + ']');
      return $view.replaceWith(Template.render(model));
    };

    View.prototype.removeView = function(model, map) {
      var $view;
      if (Wraith.DEBUG) {
        console.log('@Wraith.View', 'removeView', this);
      }
      $view = $('[data-id=' + model.get('_id') + ']');
      return $view.remove();
    };

    return View;

  })(Wraith.Base);

  this.Wraith.Controller = (function(_super) {

    __extends(Controller, _super);

    function Controller($el) {
      this.$el = $el;
      this.bind = __bind(this.bind, this);

      this.findModelById = __bind(this.findModelById, this);

      this.findIdByView = __bind(this.findIdByView, this);

      this.findViewByElement = __bind(this.findViewByElement, this);

      this.registerView = __bind(this.registerView, this);

      this.registerModel = __bind(this.registerModel, this);

      if (Wraith.DEBUG) {
        console.log('@Wraith.Controller', 'constructor');
      }
      Controller.__super__.constructor.call(this);
      this.id = Wraith.uniqueId();
      this.$el.data('id', this.id);
      this.models = [];
      this.views = [];
      this.$els = [];
      this.maps = [];
    }

    Controller.prototype.init = function() {
      if (Wraith.DEBUG) {
        console.log('@Wraith.Controller', 'init');
      }
      this.loadViews();
      this.loadViewEvents();
      return this.loadElements();
    };

    Controller.prototype.loadViews = function() {
      var _this = this;
      if (Wraith.DEBUG) {
        console.log('@Wraith.Controller', 'loadViews');
      }
      return this.$el.find('[data-map]').forEach(function(item) {
        var $view, map, model_map, template, view;
        $view = $(item);
        template = $view.data('template');
        if (!template) {
          template = item.innerHTML;
        }
        model_map = $view.data('map');
        if (!model_map) {
          return;
        }
        map = {
          model_map: model_map,
          template: template,
          $view: $view
        };
        view = new Wraith.View($view);
        _this.maps[view.id] = map;
        return _this.views[view.id] = view;
      });
    };

    Controller.prototype.loadViewEvents = function() {
      var event, i, _i, _len, _ref;
      if (this.view_events) {
        _ref = this.view_events;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          event = _ref[i];
          this.bind('ui:' + event.type + ':' + event.selector, this[event.cb]);
        }
      }
      return this;
    };

    Controller.prototype.loadElements = function() {
      var el, els, i, _i, _len, _ref;
      els = this.$el.find('[data-element]');
      for (i = _i = 0, _len = els.length; _i < _len; i = ++_i) {
        el = els[i];
        if (el.id) {
          this.$els[el.id] = (_ref = $(el)) != null ? _ref[0] : void 0;
        }
      }
      return this;
    };

    Controller.prototype.registerModel = function(name, model) {
      var l, map, mapping, nl, view, view_id, _fn, _ref;
      if (Wraith.DEBUG) {
        console.log('@Wraith.Controller', 'registerModel');
      }
      if (this.models[name]) {
        throw Error('Model name is already in use');
      }
      this.models[name] = model;
      l = name.length;
      nl = name.toLowerCase();
      _ref = this.maps;
      _fn = function(model, map, view) {
        var _this = this;
        if (model.get(mapping) instanceof Wraith.Collection) {
          model.bind('add:' + mapping, function(model_) {
            return view.createView(model_, map);
          });
          return model.bind('remove:' + mapping, function(model_) {
            return view.removeView(model_, map);
          });
        } else {
          return model.bind('change', function(model_) {
            debugger;            return view.updateView(model_, map);
          });
        }
      };
      for (view_id in _ref) {
        map = _ref[view_id];
        if (!(map.model_map.slice(0, +l + 1 || 9e9).toLowerCase() === nl + '.')) {
          continue;
        }
        view = this.views[view_id];
        if (map.model_map.indexOf('.') <= 0) {
          mapping = map.model_map.slice(0, +(l - 1) + 1 || 9e9).toLowerCase();
        } else {
          mapping = map.model_map.slice(l + 1);
        }
        _fn(model, map, view);
      }
      return this;
    };

    Controller.prototype.registerView = function(view) {
      if (Wraith.DEBUG) {
        console.log('@Wraith.Controller', 'registerView');
      }
      return this.views.push(view);
    };

    Controller.prototype.findViewByElement = function(el) {
      if (Wraith.DEBUG) {
        console.log('@Wraith.Controller', 'findViewByElement');
      }
      return $(el).closest('[wraith-view]');
    };

    Controller.prototype.findIdByView = function(el) {
      if (Wraith.DEBUG) {
        console.log('@Wraith.Controller', 'findIdByView');
      }
      return $(el).data('id');
    };

    Controller.prototype.findModelById = function(id) {
      if (Wraith.DEBUG) {
        console.log('@Wraith.Controller', 'findModelById');
      }
      return Wraith.models[id];
    };

    Controller.prototype.bind = function(ev, cb) {
      var keys, selector, uievent,
        _this = this;
      if (Wraith.DEBUG) {
        console.log('@Wraith.Controller', 'bind');
      }
      keys = ev.split(':');
      if (keys[0] === 'ui') {
        if (!((uievent = keys[1]) && __indexOf.call(Wraith.UIEvents, uievent) >= 0)) {
          throw Error('Invalid UI event given');
        }
        if (!(selector = keys[2])) {
          throw Error('Invalid selector given');
        }
        return this.$el.on(uievent, selector, function(e) {
          var $view, id, model;
          $view = _this.findViewByElement(e.currentTarget);
          id = _this.findIdByView($view);
          model = _this.findModelById(id);
          return cb.apply(_this, [e, $view, model]);
        });
      } else {
        return Controller.__super__.bind.call(this, ev, cb);
      }
    };

    return Controller;

  })(Wraith.Base);

}).call(this);
