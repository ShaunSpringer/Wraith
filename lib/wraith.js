// Generated by CoffeeScript 1.6.3
/*
**************************************************************************************
  The MIT License (MIT)

  Copyright (c) 2013 Shaun Springer

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
**************************************************************************************
*/


(function() {
  var Wraith, root,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Wraith = (function() {
    function Wraith() {}

    Wraith.DEBUG = false;

    Wraith.controllers = {};

    Wraith.models = {};

    Wraith.UIEvents = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'scroll', 'keypress', 'keyup', 'keydown', 'change', 'blur', 'focus', 'submit'];

    Wraith.log = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (Wraith.DEBUG) {
        return console.log.apply(console, args);
      }
    };

    Wraith.isFunction = function(obj) {
      return Object.prototype.toString.call(obj) === '[object Function]';
    };

    Wraith.uniqueId = function(length, prefix) {
      var id;
      if (length == null) {
        length = 16;
      }
      if (prefix == null) {
        prefix = "wraith-";
      }
      id = "";
      while (id.length < length) {
        id += Math.random().toString(36).substr(2);
      }
      id.substr(0, length);
      return id = prefix + id;
    };

    return Wraith;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Wraith = Wraith;

  Wraith.Bootloader = (function() {
    function Bootloader() {
      var $controller, controller, controllers, id, _i, _len, _ref;
      controllers = document.querySelectorAll('[data-controller]');
      for (_i = 0, _len = controllers.length; _i < _len; _i++) {
        $controller = controllers[_i];
        this.loadController($controller.attributes['data-controller'].value, $controller);
      }
      _ref = Wraith.controllers;
      for (id in _ref) {
        controller = _ref[id];
        controller.init();
      }
      this;
    }

    Bootloader.prototype.loadController = function(id, $item) {
      var Controller, controller, obj;
      obj = root;
      id.replace(/[^\.]+/g, function(m) {
        return obj = obj[m];
      });
      if (!(Controller = obj)) {
        throw 'Controller does not exist';
      }
      controller = new Controller($item);
      return Wraith.controllers[controller.id] = controller;
    };

    return Bootloader;

  })();

  Wraith.Base = (function() {
    function Base() {
      this.emit = __bind(this.emit, this);
      this.unbind = __bind(this.unbind, this);
      this.bind = __bind(this.bind, this);
      this.id = Wraith.uniqueId();
      this.listeners = {};
    }

    Base.prototype.bind = function(ev, cb) {
      var list, _base;
      if (!Wraith.isFunction(cb)) {
        throw 'Callback is not a function';
      }
      list = (_base = this.listeners)[ev] != null ? (_base = this.listeners)[ev] : _base[ev] = [];
      list.push(cb);
      return this;
    };

    Base.prototype.unbind = function(ev, cb) {
      var callback, i, list, _i, _len, _ref;
      list = (_ref = this.listeners) != null ? _ref[ev] : void 0;
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        callback = list[i];
        if (!(callback === cb)) {
          continue;
        }
        list.slice();
        list.splice(i, 1);
        this.listeners[ev] = list;
        break;
      }
      return this;
    };

    Base.prototype.emit = function() {
      var args, event, listener, _i, _len, _ref;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.listeners[event] != null) {
        _ref = this.listeners[event];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          listener.apply(null, args);
        }
      }
      return this;
    };

    Base.prototype.proxy = function(fn) {
      var _this = this;
      return function() {
        return fn.apply(_this, arguments);
      };
    };

    return Base;

  })();

  Wraith.Model = (function(_super) {
    __extends(Model, _super);

    Model.field = function(name, opt) {
      if (this.fields == null) {
        this.fields = {};
      }
      return this.fields[name] = opt != null ? opt : {};
    };

    Model.hasMany = function(klass, as, opt) {
      if (opt == null) {
        opt = {};
      }
      if (opt.klass == null) {
        opt.klass = klass;
      }
      if (opt.as == null) {
        opt.as = as;
      }
      if (this.collections == null) {
        this.collections = {};
      }
      return this.collections[as] = opt;
    };

    function Model(attributes) {
      this.toJSON = __bind(this.toJSON, this);
      this.set = __bind(this.set, this);
      this.get = __bind(this.get, this);
      var _base;
      Wraith.log('@Wraith.Model', 'constructor');
      Model.__super__.constructor.call(this);
      if ((_base = this.constructor).fields == null) {
        _base.fields = {};
      }
      if (!(attributes != null ? attributes['_id'] : void 0)) {
        this.constructor.fields['_id'] = {
          "default": Wraith.uniqueId
        };
      }
      this.reset(attributes);
      Wraith.models[this.attributes['_id']] = this;
      this;
    }

    Model.prototype.reset = function(attributes) {
      var d, name, options, _ref, _ref1, _results;
      this.listeners = {};
      this.attributes = {};
      _ref = this.constructor.fields;
      for (name in _ref) {
        options = _ref[name];
        if ((attributes != null ? attributes[name] : void 0) != null) {
          d = attributes[name];
        } else {
          d = Wraith.isFunction(options["default"]) ? options["default"]() : options["default"];
        }
        this.set(name, d);
      }
      _ref1 = this.constructor.collections;
      _results = [];
      for (name in _ref1) {
        options = _ref1[name];
        _results.push(this.attributes[name] = new Wraith.Collection(this, options.as, options.klass));
      }
      return _results;
    };

    Model.prototype.get = function(key) {
      var _ref;
      return (_ref = this.attributes) != null ? _ref[key] : void 0;
    };

    Model.prototype.set = function(key, val) {
      var field;
      if (!(field = this.constructor.fields[key])) {
        throw 'Trying to set an non-existent property!';
      }
      if (val === this.get(key)) {
        return;
      }
      this.attributes[key] = val;
      this.emit('change', key, val);
      return this.emit('change:' + key, val);
    };

    Model.prototype.toJSON = function() {
      return this.attributes;
    };

    return Model;

  })(Wraith.Base);

  Wraith.Collection = (function(_super) {
    __extends(Collection, _super);

    function Collection(parent, as, klass) {
      this.parent = parent;
      this.as = as;
      this.klass = klass;
      this.handleChange = __bind(this.handleChange, this);
      this.findById = __bind(this.findById, this);
      this.length = __bind(this.length, this);
      this.all = __bind(this.all, this);
      this.remove = __bind(this.remove, this);
      this.add = __bind(this.add, this);
      this.create = __bind(this.create, this);
      Wraith.log('@Wraith.Collection', 'constructor');
      Collection.__super__.constructor.call(this);
      this.members = [];
    }

    Collection.prototype.create = function(attr) {
      return this.add(new this.klass(attr));
    };

    Collection.prototype.add = function(item) {
      this.members.push(item);
      this.parent.emit('ad:', item);
      this.parent.emit('add:' + this.as, item);
      this.parent.emit('change:' + this.as, this);
      this.parent.emit('change', this);
      item.bind('change', item.proxy(this.handleChange));
      return item;
    };

    Collection.prototype.remove = function(id) {
      var i, item, _i, _len, _ref;
      _ref = this.members;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (!(item.get('_id') === id)) {
          continue;
        }
        this.members.splice(i, 1);
        this.parent.emit('remove', item);
        this.parent.emit('remove:' + this.as, item);
        this.parent.emit('change:' + this.as, this);
        this.parent.emit('change', this);
        item.unbind('change', item.proxy(this.handleChange));
        return item;
      }
      return false;
    };

    Collection.prototype.all = function() {
      return this.members;
    };

    Collection.prototype.length = function() {
      return this.members.length;
    };

    Collection.prototype.findById = function(id) {
      var i, item, _i, _len, _ref;
      _ref = this.members;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (item.get('_id') === id) {
          return item;
        }
      }
    };

    Collection.prototype.handleChange = function(key, value) {
      this.parent.emit('change:' + this.as, key, value);
      return this.parent.emit('change', key, value);
    };

    return Collection;

  })(Wraith.Model);

  Wraith.Template = (function() {
    Template.escapeRegExp = function(string) {
      return string.replace(/([.*+?^${}()|[\]\/\\])/g, '\\$1');
    };

    Template.settings = {
      start: '{{',
      end: '}}',
      interpolate: /{{(.+?)}}/g,
      checked: /data-checked=[\'\"](.+?)[\'\"]/gi,
      classes: /data-class=[\'\"](.+?)[\'\"]/gi,
      classesMerge: /class="([^"]+?)"([^<^>]*)class="([^"]+?)"/gi,
      dotNotation: '[a-z0-9_()][\\.a-z0-9_()]*'
    };

    function Template(template) {
      this.template = template;
      this;
    }

    Template.prototype.compile = function(data) {
      var c, endMatch, str, template;
      if (this.template_fn) {
        return this.template_fn(data);
      }
      c = Wraith.Template.settings;
      template = this.template;
      endMatch = new RegExp("'(?=[^" + c.end.substr(0, 1) + "]*" + Wraith.Template.escapeRegExp(c.end) + ")", "g");
      str = 'var p=[],print=function(){p.push.apply(p,arguments);};' + 'p[p.length] = \'' + template.replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/\t/g, '\\t').replace(endMatch, "✄").split("'").join("\\'").split("✄").join("'").replace(c.interpolate, "' + Wraith.Template.interpolate(obj, \'$1\') + '").replace(c.checked, "' + ((Wraith.Template.interpolate(obj, \'$1\') === true) ? 'checked=\"checked\"' : \'\') + '").replace(c.classes, "class=\"' + Wraith.Template.interpolateClass(obj, \'$1\') + '\"").replace(c.classesMerge, "class=\"$1 $3\"' + ((\'$2\').length > 0 ? \'$2\' : '') + '").split(c.start).join("');").split(c.end).join("p.push('") + "'; return p.join('');";
      this.template_fn = new Function('obj', str);
      return this.template_fn(data);
    };

    Template.interpolate = function(model, tokens) {
      var count, results, target, token, _i, _len;
      count = 0;
      results = false;
      tokens = tokens.split('.');
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        token = tokens[_i];
        target = count === 0 ? model : results;
        if (target.hasOwnProperty(token)) {
          results = target[token];
        } else {
          results = target.get(token);
        }
        if (Wraith.isFunction(results)) {
          results = results();
        }
        count++;
      }
      return results;
    };

    Template.interpolateClass = function(model, tokens) {
      var binding, invert, klass, klassMap, klasses, results, _i, _len, _ref;
      klasses = [];
      _ref = tokens.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        klassMap = _ref[_i];
        binding = klassMap.split(':');
        if (binding.length !== 2) {
          continue;
        }
        klass = binding[0];
        tokens = binding[1];
        invert = tokens[0] === '!';
        if (invert) {
          tokens = tokens.slice(1);
        }
        results = Wraith.Template.interpolate(model, tokens);
        if (invert) {
          results = !results;
        }
        if (!results) {
          continue;
        }
        klasses.push(klass);
      }
      return klasses.join(' ');
    };

    return Template;

  }).call(this);

  Wraith.BaseView = (function(_super) {
    __extends(BaseView, _super);

    function BaseView($el) {
      this.$el = $el;
      this.unbindUIEvent = __bind(this.unbindUIEvent, this);
      this.unbindUIEvents = __bind(this.unbindUIEvents, this);
      this.handleUIEvent = __bind(this.handleUIEvent, this);
      this.wrapUIEvent = __bind(this.wrapUIEvent, this);
      this.bindUIEvent = __bind(this.bindUIEvent, this);
      this.bindUIEvents = __bind(this.bindUIEvents, this);
      if (!this.$el) {
        throw 'Element is required by View';
      }
      BaseView.__super__.constructor.call(this);
    }

    BaseView.prototype.bindUIEvents = function($view) {
      var $el, els, _i, _len;
      els = $view.querySelectorAll('[data-events]');
      if ($view.attributes['data-events']) {
        this.bindUIEvent($view, $view.attributes['data-events'].value);
      }
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        $el = els[_i];
        this.bindUIEvent($el, $el.attributes['data-events'].value);
      }
      return this;
    };

    BaseView.prototype.bindUIEvent = function($view, event) {
      var cb, eventArr, events, name, _i, _len, _ref;
      events = event.split(/[,?\s?]/);
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        eventArr = event.split(':');
        if (eventArr.length !== 2) {
          continue;
        }
        name = eventArr[0];
        cb = eventArr[1];
        if (_ref = !name, __indexOf.call(Wraith.UIEvents, _ref) >= 0) {
          continue;
        }
        $view.addEventListener(name, this.wrapUIEvent(cb));
      }
      return this;
    };

    BaseView.prototype.wrapUIEvent = function(cb) {
      var _this = this;
      return function(e) {
        e.stopPropagation();
        return _this.handleUIEvent(e, cb);
      };
    };

    BaseView.prototype.handleUIEvent = function(e, cb) {
      return this.emit('uievent', e, cb);
    };

    BaseView.prototype.unbindUIEvents = function($view) {
      var $el, els, _i, _len;
      els = $view.querySelectorAll('[data-events]');
      if ($view.attributes['data-events']) {
        this.unbindUIEvent($view, $view.attributes['data-events'].value);
      }
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        $el = els[_i];
        this.unbindUIEvent($el, $el.attributes['data-events'].value);
      }
      return this;
    };

    BaseView.prototype.unbindUIEvent = function($view, event) {
      var cb, eventArr, events, name, _i, _len, _ref,
        _this = this;
      events = event.split(/[,?\s?]/);
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        eventArr = event.split(':');
        if (eventArr.length !== 2) {
          continue;
        }
        name = eventArr[0];
        cb = eventArr[1];
        if (_ref = !name, __indexOf.call(Wraith.UIEvents, _ref) >= 0) {
          continue;
        }
        $view.removeEventListener(name, function(e) {
          return _this.handleUIEvent(e, cb);
        });
      }
      return this;
    };

    return BaseView;

  })(Wraith.Base);

  Wraith.ViewModel = (function(_super) {
    __extends(ViewModel, _super);

    function ViewModel($el, template) {
      this.$el = $el;
      this.handleFormSubmit_ = __bind(this.handleFormSubmit_, this);
      this.handleInputKeypress_ = __bind(this.handleInputKeypress_, this);
      this.unbindModel = __bind(this.unbindModel, this);
      this.bindModel = __bind(this.bindModel, this);
      this.applyViewUpdate = __bind(this.applyViewUpdate, this);
      Wraith.log('@Wraith.ViewModel', 'constructor');
      if (!this.$el) {
        throw 'Element is required by View';
      }
      if (!template) {
        throw 'Template is required by View';
      }
      ViewModel.__super__.constructor.call(this, this.$el);
      this.$parent = this.$el.parentNode;
      this.template = new Wraith.Template(template);
    }

    ViewModel.prototype.render = function(model) {
      var $el;
      $el = document.createElement('div');
      $el.innerHTML = this.template.compile(model);
      $el = $el.firstChild;
      return $el;
    };

    ViewModel.prototype.updateView = function(model) {
      var $view;
      this.unbindUIEvents(this.$el);
      $view = this.render(model);
      this.bindUIEvents($view);
      this.applyViewUpdate(this.$el, $view);
      return this;
    };

    ViewModel.prototype.applyViewUpdate = function($old, $new) {
      var $child, attr, attrs, i, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      attrs = [];
      if ($old.attributes) {
        attrs = (function() {
          var _i, _len, _ref, _results;
          _ref = $old.attributes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            attr = _ref[_i];
            _results.push(attr.name);
          }
          return _results;
        })();
      }
      if ($new.attributes) {
        _ref = $new.attributes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attr = _ref[_i];
          if (attrs.indexOf(attr.name) === -1) {
            attrs.push(attr.name);
          }
        }
      }
      if (attrs.length > 0) {
        for (_j = 0, _len1 = attrs.length; _j < _len1; _j++) {
          attr = attrs[_j];
          this.updateAttribute(attr, $old, $new);
        }
      }
      if ($old.nodeValue !== $new.nodeValue) {
        $old.nodeValue = $new.nodeValue;
      }
      _ref1 = $old.childNodes;
      for (i = _k = 0, _len2 = _ref1.length; _k < _len2; i = ++_k) {
        $child = _ref1[i];
        this.applyViewUpdate($child, $new.childNodes[i]);
      }
      return this;
    };

    ViewModel.prototype.updateAttribute = function(name, $old, $new) {
      var newval, oldval, _ref, _ref1;
      oldval = (_ref = $old.attributes[name]) != null ? _ref.value : void 0;
      newval = (_ref1 = $new.attributes[name]) != null ? _ref1.value : void 0;
      if (name === 'checked') {
        $old.checked = newval != null;
      }
      if (oldval === newval) {
        return;
      }
      if (newval) {
        return $old.setAttribute(name, newval);
      } else {
        return $old.removeAttribute(name);
      }
    };

    ViewModel.prototype.bindModel = function(model) {
      var _this = this;
      this.$el.addEventListener('keyup', function(e) {
        return _this.handleInputKeypress_(e, model);
      });
      if (this.$el.nodeName === 'FORM') {
        this.$el.addEventListener('submit', function(e) {
          return _this.handleFormSubmit_(e, model);
        });
      }
      return this.updateView(model);
    };

    ViewModel.prototype.unbindModel = function(model) {
      var _this = this;
      this.$el.removeEventListener('keyup', function(e) {
        return _this.handleInputKeypress_(e, model);
      });
      if (this.$el.nodeName === 'FORM') {
        return this.$el.removeEventListener('submit', function(e) {
          return _this.handleFormSubmit_(e, model);
        });
      }
    };

    ViewModel.prototype.handleInputKeypress_ = function(e, model) {
      var $target;
      $target = e.target;
      return model.set($target.name, $target.value);
    };

    ViewModel.prototype.handleFormSubmit_ = function(e, model) {
      var $target, parent;
      $target = e.target;
      if (!(parent = model.parent)) {
        return;
      }
      parent.create(model.toJSON());
      return model.reset({});
    };

    return ViewModel;

  })(Wraith.BaseView);

  Wraith.CollectionView = (function(_super) {
    __extends(CollectionView, _super);

    function CollectionView($el, template) {
      this.$el = $el;
      this.template = template;
      Wraith.log('@Wraith.CollectionView', 'constructor');
      CollectionView.__super__.constructor.call(this, this.$el, this.template);
      this.$parent.innerHTML = '';
    }

    CollectionView.prototype.createView = function(model) {
      var $view;
      if (!(model instanceof Wraith.Model)) {
        return;
      }
      $view = this.render(model);
      $view.setAttribute('data-model-id', model.get('_id'));
      this.bindUIEvents($view);
      return this.$parent.appendChild($view);
    };

    CollectionView.prototype.removeView = function(model) {
      var $view;
      if (!(model instanceof Wraith.Model)) {
        return;
      }
      $view = this.$parent.querySelector('[data-model-id=' + model.get('_id') + ']');
      this.unbindUIEvents($view);
      return this.$parent.removeChild($view);
    };

    CollectionView.prototype.updateView = function(model) {
      var $el, $view;
      if (!($el = this.$parent.querySelector('[data-model-id=' + model.get('_id') + ']'))) {
        return;
      }
      $view = this.render(model);
      $view.setAttribute('data-model-id', model.get('_id'));
      this.unbindUIEvents($el);
      this.bindUIEvents($view);
      return this.applyViewUpdate($el, $view);
    };

    return CollectionView;

  })(Wraith.ViewModel);

  Wraith.Controller = (function(_super) {
    __extends(Controller, _super);

    function Controller($el) {
      this.$el = $el;
      this.getModelFromEl = __bind(this.getModelFromEl, this);
      this.handleViewUIEvent = __bind(this.handleViewUIEvent, this);
      this.handleUIEvent = __bind(this.handleUIEvent, this);
      Wraith.log('@Wraith.Controller', 'constructor');
      Controller.__super__.constructor.call(this, this.$el);
      this.$el.setAttribute('data-id', this.id);
      this.models = [];
      this.views = [];
      this.bindings = [];
      this.$els = {};
    }

    Controller.prototype.init = function() {
      Wraith.log('@Wraith.Controller', 'init');
      this.loadViews();
      this.loadForms();
      this.bindUIEvents(this.$el);
      return this.loadElements();
    };

    Controller.prototype.loadElements = function() {
      var $el, els, _i, _len;
      els = this.$el.querySelectorAll('[id]');
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        $el = els[_i];
        this.$els[$el.id] = $el;
      }
      return this;
    };

    Controller.prototype.loadViews = function() {
      var $view, views, _i, _len;
      views = document.querySelectorAll('[data-bind]');
      for (_i = 0, _len = views.length; _i < _len; _i++) {
        $view = views[_i];
        this.registerView($view, false);
      }
      return this;
    };

    Controller.prototype.loadForms = function() {
      var $forms, forms, _i, _len;
      forms = document.querySelectorAll('form[data-model]');
      for (_i = 0, _len = forms.length; _i < _len; _i++) {
        $forms = forms[_i];
        this.registerView($forms, true);
      }
      return this;
    };

    Controller.prototype.registerView = function($view, twoWay) {
      var binding, maps, repeating, targetModel, template, templateId, textbox, view, _base, _ref, _ref1, _ref2, _ref3;
      if (!(binding = ((_ref = $view.attributes['data-bind']) != null ? _ref.value : void 0) || ((_ref1 = $view.attributes['data-model']) != null ? _ref1.value : void 0))) {
        return;
      }
      maps = binding.split('.');
      if (!(targetModel = maps[0])) {
        return;
      }
      repeating = $view.attributes['data-repeat'] !== void 0;
      templateId = (_ref2 = $view.attributes['data-template']) != null ? _ref2.value : void 0;
      if (templateId !== void 0) {
        if (!(template = (_ref3 = document.getElementById(templateId)) != null ? _ref3.innerHTML : void 0)) {
          return;
        }
      } else {
        template = $view.outerHTML;
      }
      textbox = document.createElement('textarea');
      textbox.innerHTML = template;
      template = textbox.value;
      if (repeating) {
        view = new Wraith.CollectionView($view, template);
      } else {
        view = new Wraith.ViewModel($view, template);
      }
      view.bind('uievent', this.handleViewUIEvent);
      this.views.push(view);
      if ((_base = this.bindings)[targetModel] == null) {
        _base[targetModel] = [];
      }
      this.bindings[targetModel].push({
        binding: binding,
        view: view,
        twoWay: twoWay
      });
      return this;
    };

    Controller.prototype.registerModel = function(model, as) {
      if (this.models[as]) {
        throw 'Model name already registered';
      }
      if (!model instanceof Wraith.Model) {
        throw 'Model is not valid';
      }
      this.models[as] = model;
      this.bindViews(as, model);
      return model;
    };

    Controller.prototype.bindViews = function(name, model) {
      var bindings, map, _i, _len;
      if (!(bindings = this.bindings[name])) {
        return;
      }
      for (_i = 0, _len = bindings.length; _i < _len; _i++) {
        map = bindings[_i];
        this.bindView(model, map.binding, map.view, map.twoWay);
      }
      return this;
    };

    Controller.prototype.bindView = function(model, binding, view, twoWay) {
      var map, mapping, model_;
      mapping = binding.split('.');
      map = mapping[1];
      if (!twoWay) {
        if (map && view instanceof Wraith.CollectionView) {
          model.bind('add:' + map, function(model_) {
            view.createView(model_);
            return model_.bind('change', function() {
              return view.updateView(model_);
            });
          });
          return model.bind('remove:' + map, function(model_) {
            return view.removeView(model_);
          });
        } else if (map) {
          return model.bind('change:' + map, function(model_) {
            return view.updateView(model_);
          });
        } else {
          return model.bind('change', function() {
            return view.updateView(model);
          });
        }
      } else {
        if (map) {
          model_ = model.get(map);
        }
        if (model_ instanceof Wraith.Collection) {
          model = model_;
        }
        return this.bindModelView(model, view);
      }
    };

    Controller.prototype.bindModelView = function(model, view) {
      var klass, model_;
      if (model instanceof Wraith.Collection) {
        klass = model.klass;
        model_ = new klass({});
        model_.parent = model;
        model = model_;
      }
      model.bind('change', function() {
        return view.updateView(model);
      });
      return view.bindModel(model);
    };

    Controller.prototype.unbindModelView = function(model, view) {
      return view.unbindModel(model);
    };

    Controller.prototype.handleUIEvent = function(e, cb) {
      if (!this[cb]) {
        throw "Callback " + cb + " not found on controller";
      }
      e.data = this.getInputDataFromEl(e.currentTarget);
      return this[cb](e);
    };

    Controller.prototype.handleViewUIEvent = function(e, cb) {
      if (!this[cb]) {
        throw "Callback " + cb + " not found on controller";
      }
      e.model = this.getModelFromEl(e.target);
      return this[cb](e);
    };

    Controller.prototype.getModelFromEl = function($el) {
      var modelId, _ref;
      while ($el) {
        if (!$el.attributes) {
          break;
        }
        if (modelId = (_ref = $el.attributes['data-model-id']) != null ? _ref.value : void 0) {
          break;
        }
        $el = $el.parentNode;
      }
      if (!modelId) {
        return;
      }
      return Wraith.models[modelId];
    };

    Controller.prototype.getInputDataFromEl = function($el) {
      var data, els, _i, _len;
      data = {};
      els = $el.querySelectorAll('input[name]');
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        $el = els[_i];
        data[$el.attributes['name'].value] = $el.value;
      }
      return data;
    };

    return Controller;

  })(Wraith.BaseView);

}).call(this);
