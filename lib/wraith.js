// Generated by CoffeeScript 1.4.0
(function() {
  var root,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  this.Wraith = {};

  this.Wraith.Bootloader = (function() {

    function Bootloader() {
      var self;
      self = this;
      $('script[type="text/template"]').forEach(function(view) {
        return self.load($(view).attr('id'));
      });
    }

    Bootloader.prototype.load = function(id) {
      var $view, Controller, Model, controller, model, view;
      $view = $('#' + id);
      if (!(controller = $view.data('controller'))) {
        throw Error('Controller does not exist');
      }
      if (!(model = $view.data('model'))) {
        throw Error('Model does not exist');
      }
      Model = root.Models[model];
      view = new Wraith.View($view.html());
      Controller = root.Controllers[controller];
      return new Controller(Model, view);
    };

    return Bootloader;

  })();

  this.Wraith.Base = (function() {

    function Base() {
      this.listeners = {};
    }

    Base.prototype.bind = function(ev, cb) {
      var list, _base, _ref;
      list = (_ref = (_base = this.listeners)[ev]) != null ? _ref : _base[ev] = [];
      return list.push(cb);
    };

    Base.prototype.unbind = function(ev, cb) {
      var callback, i, list, _i, _len, _ref;
      list = (_ref = this.listeners) != null ? _ref[ev] : void 0;
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        callback = list[i];
        if (!(callback === cb)) {
          continue;
        }
        list.slice();
        list.splice(i, 1);
        this.listeners[ev] = list;
        break;
      }
      return this;
    };

    Base.prototype.emit = function() {
      var args, event, listener, _i, _len, _ref, _results;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.listeners[event]) {
        _ref = this.listeners[event];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          _results.push(listener.apply(null, args));
        }
        return _results;
      }
    };

    Base.proxy = function(func) {
      var _this = this;
      return function() {
        return func.apply(_this, arguments);
      };
    };

    Base.prototype.proxy = function(func) {
      var _this = this;
      return function() {
        return func.apply(_this, arguments);
      };
    };

    return Base;

  })();

  this.Wraith.Validator = (function() {

    function Validator() {}

    Validator.STRING = 'string';

    Validator.is = function(obj, type) {
      if (typeof obj === type || obj instanceof type) {
        return true;
      }
      return false;
    };

    Validator.isString = function(obj) {
      return this.is(obj, this.STRING);
    };

    return Validator;

  })();

  this.Wraith.Model = (function(_super) {

    __extends(Model, _super);

    Model.field = function(name, opt) {
      var _ref;
      if (!Wraith.Validator.isString(name)) {
        return;
      }
      if ((_ref = this.fields) == null) {
        this.fields = {};
      }
      return this.fields[name] = typeof options !== "undefined" && options !== null ? options : {};
    };

    function Model(attributes) {
      this.attributes = attributes;
      this.set = __bind(this.set, this);

      this.get = __bind(this.get, this);

    }

    Model.prototype.get = function(key) {
      var _ref;
      return (_ref = this.attributes) != null ? _ref[key] : void 0;
    };

    Model.prototype.set = function(key, val) {
      if (!this.attributes[key]) {
        throw Error('Attribute does not exist on model');
      }
      return this.attributes[key] = val;
    };

    return Model;

  })(Wraith.Base);

  this.Wraith.Model.Ajax = (function(_super) {

    __extends(Ajax, _super);

    function Ajax(attributes, url) {
      this.attributes = attributes;
      this.url = url;
      Ajax.__super__.constructor.call(this, this.attributes);
    }

    return Ajax;

  })(Wraith.Model);

  this.Wraith.View = (function(_super) {

    __extends(View, _super);

    function View(template) {
      this.template = template;
    }

    return View;

  })(Wraith.Base);

  this.Wraith.Controller = (function(_super) {

    __extends(Controller, _super);

    function Controller(model, view) {
      this.model = model;
      this.view = view;
      if (!this.model) {
        throw Error('Model is required');
      }
      if (!this.view) {
        throw Error('View is required');
      }
      Controller.__super__.constructor.call(this);
    }

    return Controller;

  })(Wraith.Base);

}).call(this);
