// Generated by CoffeeScript 1.4.0
(function() {
  var root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  this.Wraith = {
    DEBUG: true,
    Controllers: [],
    controllers: {},
    Collections: {},
    Models: {},
    models: {},
    Templates: {},
    UIEvents: ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'scroll', 'keypress', 'keyup', 'keydown', 'change', 'blur', 'focus'],
    isFunction: function(obj) {
      return Object.prototype.toString.call(obj) === '[object Function]';
    },
    delay: function(ms, func) {
      return setTimeout(func, ms);
    },
    escapeRegExp: function(string) {
      return string.replace(/([.*+?^${}()|[\]\/\\])/g, '\\$1');
    },
    templateSettings: {
      start: '<%',
      end: '%>',
      interpolate: /<%=(.+?)%>/g,
      interpolate_get: /<%-(.+?)%>/g
    },
    compile: function(template) {
      var c, endMatch, fn;
      c = Wraith.templateSettings;
      endMatch = new RegExp("'(?=[^" + c.end.substr(0, 1) + "]*" + Wraith.escapeRegExp(c.end) + ")", "g");
      fn = new Function('obj', 'var p=[],print=function(){p.push.apply(p,arguments);};' + 'with(obj||{}){p.push(\'' + template.replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/\t/g, '\\t').replace(endMatch, "✄").split("'").join("\\'").split("✄").join("'").replace(c.interpolate, "',$1,'").replace(c.interpolate_get, "',get(\"$1\"),'").split(c.start).join("');").split(c.end).join("p.push('") + "');}return p.join('');");
      return fn;
    },
    uniqueId: function(length, prefix) {
      var id;
      if (length == null) {
        length = 16;
      }
      if (prefix == null) {
        prefix = "wraith-";
      }
      id = "";
      while (id.length < length) {
        id += Math.random().toString(36).substr(2);
      }
      id.substr(0, length);
      return id = prefix + id;
    }
  };

  this.Wraith.Bootloader = (function() {

    function Bootloader() {
      var $controller, controller, controllers, id, _i, _len, _ref;
      controllers = document.querySelectorAll('[data-controller]');
      for (_i = 0, _len = controllers.length; _i < _len; _i++) {
        $controller = controllers[_i];
        this.loadController($controller.attributes['data-controller'].value, $controller);
      }
      _ref = Wraith.controllers;
      for (id in _ref) {
        controller = _ref[id];
        controller.init();
      }
      this;

    }

    Bootloader.prototype.loadController = function(id, $item) {
      var Controller, controller;
      if (!(Controller = Wraith.Controllers[id])) {
        throw Error('Controller does not exist');
      }
      controller = new Controller($item);
      return Wraith.controllers[controller.id] = controller;
    };

    return Bootloader;

  })();

  this.Wraith.Base = (function() {

    function Base() {
      this.emit = __bind(this.emit, this);

      this.unbind = __bind(this.unbind, this);

      this.bind = __bind(this.bind, this);
      this.listeners = {};
    }

    Base.prototype.bind = function(ev, cb) {
      var list, _base, _ref;
      if (!Wraith.isFunction(cb)) {
        throw Error('Callback is not a function');
      }
      list = (_ref = (_base = this.listeners)[ev]) != null ? _ref : _base[ev] = [];
      list.push(cb);
      return this;
    };

    Base.prototype.unbind = function(ev, cb) {
      var callback, i, list, _i, _len, _ref;
      list = (_ref = this.listeners) != null ? _ref[ev] : void 0;
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        callback = list[i];
        if (!(callback === cb)) {
          continue;
        }
        list.slice();
        list.splice(i, 1);
        this.listeners[ev] = list;
        break;
      }
      return this;
    };

    Base.prototype.emit = function() {
      var args, event, listener, _i, _len, _ref, _results;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.listeners[event] != null) {
        _ref = this.listeners[event];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          _results.push(listener.apply(null, args));
        }
        return _results;
      }
    };

    return Base;

  })();

  this.Wraith.Validator = (function() {

    function Validator() {}

    Validator.STRING = 'string';

    Validator.is = function(obj, type) {
      if (typeof obj === type || obj instanceof type) {

      }
    };

    Validator.isString = function(obj) {
      return this.is(obj, this.STRING);
    };

    return Validator;

  })();

  this.Wraith.Collection = (function(_super) {

    __extends(Collection, _super);

    function Collection(parent, as, klass) {
      this.parent = parent;
      this.as = as;
      this.klass = klass;
      this.findById = __bind(this.findById, this);

      this.at = __bind(this.at, this);

      this.length = __bind(this.length, this);

      this.all = __bind(this.all, this);

      this.remove = __bind(this.remove, this);

      this.add = __bind(this.add, this);

      this.create = __bind(this.create, this);

      this.members = [];
    }

    Collection.prototype.create = function(attr) {
      return this.add(new this.klass(attr));
    };

    Collection.prototype.add = function(item) {
      this.members.push(item);
      this.parent.emit('change');
      this.parent.emit('add:' + this.as, item);
      return item;
    };

    Collection.prototype.remove = function(id) {
      var i, item, _i, _len, _ref;
      _ref = this.members;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (!(item.get('_id') === id)) {
          continue;
        }
        this.parent.emit('change');
        this.parent.emit('remove:' + this.as, item);
        this.members.splice(i, 1);
        break;
      }
      return this;
    };

    Collection.prototype.all = function() {
      return this.members;
    };

    Collection.prototype.length = function() {
      return this.members.length;
    };

    Collection.prototype.at = function(index) {
      return this.members[index];
    };

    Collection.prototype.findById = function(id) {
      var i, item, _i, _len, _ref;
      _ref = this.members;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (item.get('_id') === id) {
          return item;
        }
      }
    };

    return Collection;

  })(this.Wraith.Base);

  this.Wraith.Model = (function(_super) {

    __extends(Model, _super);

    Model.field = function(name, opt) {
      var _ref;
      if ((_ref = this.fields) == null) {
        this.fields = {};
      }
      return this.fields[name] = opt != null ? opt : {};
    };

    Model.hasMany = function(klass, opt) {
      var _ref, _ref1;
      if (opt == null) {
        opt = {};
      }
      if ((_ref = opt.klass) == null) {
        opt.klass = klass;
      }
      if ((_ref1 = this.collections) == null) {
        this.collections = {};
      }
      return this.collections[opt.as] = opt;
    };

    function Model(attributes) {
      this.toJSON = __bind(this.toJSON, this);

      this.set = __bind(this.set, this);

      this.get = __bind(this.get, this);

      var d, name, options, _base, _ref, _ref1, _ref2;
      Model.__super__.constructor.call(this);
      if ((_ref = (_base = this.constructor).fields) == null) {
        _base.fields = {};
      }
      if (!(attributes != null ? attributes['_id'] : void 0)) {
        this.constructor.fields['_id'] = {
          "default": Wraith.uniqueId
        };
      }
      this.listeners = {};
      this.attributes = {};
      _ref1 = this.constructor.fields;
      for (name in _ref1) {
        options = _ref1[name];
        if ((attributes != null ? attributes[name] : void 0) != null) {
          d = attributes != null ? attributes[name] : void 0;
        } else {
          d = Wraith.isFunction(options["default"]) ? options["default"]() : options["default"];
        }
        this.set(name, d);
      }
      _ref2 = this.constructor.collections;
      for (name in _ref2) {
        options = _ref2[name];
        this.attributes[name] = new Wraith.Collection(this, options.as, options.klass);
      }
      Wraith.models[this.attributes['_id']] = this;
      this;

    }

    Model.prototype.get = function(key) {
      var _ref;
      return (_ref = this.attributes) != null ? _ref[key] : void 0;
    };

    Model.prototype.set = function(key, val) {
      var field;
      if (!(field = this.constructor.fields[key])) {
        throw Error('Trying to set an non-existent property!');
      }
      if (val === this.get(key)) {
        return;
      }
      this.attributes[key] = val;
      this.emit('change', key, val);
      return this.emit("change:" + key, val);
    };

    Model.prototype.toJSON = function() {
      return this.attributes;
    };

    return Model;

  })(this.Wraith.Base);

  this.Wraith.Template = (function(_super) {

    __extends(Template, _super);

    function Template(template, wrap) {
      this.template = template;
      if (wrap == null) {
        wrap = false;
      }
      if (Wraith.DEBUG) {
        console.log('@Wraith.Template', 'constructor');
      }
      if (!this.template) {
        throw Error('Template is required');
      }
      if (wrap) {
        this.template = '<div wraith-view data-id="<%=get("_id")%>">' + this.template + '</div>';
      }
      this.template_fn = Wraith.compile(this.template);
    }

    Template.prototype.render = function(data) {
      return this.template_fn(data);
    };

    return Template;

  })(this.Wraith.Base);

  this.Wraith.View = (function(_super) {

    __extends(View, _super);

    function View($el, template) {
      this.$el = $el;
      this.template = template;
      if (Wraith.DEBUG) {
        console.log('@Wraith.View', 'constructor');
      }
      if (!this.$el) {
        throw new Error('Element is required by RepeatingView');
      }
      if (!this.template) {
        throw new Error('Template is required by RepeatingView');
      }
      View.__super__.constructor.call(this);
      this.id = Wraith.uniqueId();
    }

    return View;

  })(this.Wraith.Base);

  this.Wraith.RepeatingView = (function(_super) {

    __extends(RepeatingView, _super);

    function RepeatingView($parent, el, template) {
      var _base, _name, _ref;
      this.$parent = $parent;
      this.el = el;
      this.template = template;
      if (Wraith.DEBUG) {
        console.log('@Wraith.RepeatingView', 'constructor');
      }
      if (!this.$parent) {
        throw new Error('Parent is required by RepeatingView');
      }
      if (!this.el) {
        throw new Error('Element type is required by RepeatingView');
      }
      if (!this.template) {
        throw new Error('Template is required by RepeatingView');
      }
      RepeatingView.__super__.constructor.call(this);
      this.id = Wraith.uniqueId();
      this.$parent.innerHTML = '';
      if ((_ref = (_base = Wraith.Templates)[_name = this.template]) == null) {
        _base[_name] = new Wraith.Template(template);
      }
      this.Template = Wraith.Templates[this.template];
    }

    RepeatingView.prototype.createView = function(model) {
      var $el, rendered;
      if (!(model instanceof Wraith.Model)) {
        return;
      }
      rendered = this.Template.render(model);
      $el = document.createElement(this.el);
      $el.setAttribute('id', Wraith.uniqueId());
      $el.innerHTML = rendered;
      return this.$parent.appendChild($el);
    };

    return RepeatingView;

  })(this.Wraith.Base);

  this.Wraith.Controller = (function(_super) {

    __extends(Controller, _super);

    function Controller($el) {
      this.$el = $el;
      if (Wraith.DEBUG) {
        console.log('@Wraith.Controller', 'constructor');
      }
      Controller.__super__.constructor.call(this);
      this.id = Wraith.uniqueId();
      this.$el.setAttribute('id', this.id);
      this.models = [];
      this.views = [];
      this.bindings = [];
    }

    Controller.prototype.init = function() {
      if (Wraith.DEBUG) {
        console.log('@Wraith.Controller', 'init');
      }
      return this.findViews();
    };

    Controller.prototype.findViews = function() {
      var $view, views, _i, _len;
      views = document.querySelectorAll('[data-bind]');
      for (_i = 0, _len = views.length; _i < _len; _i++) {
        $view = views[_i];
        this.registerView($view);
      }
      return this;
    };

    Controller.prototype.registerView = function($view) {
      var binding, maps, repeating, target_model, template, template_id, textbox, view, _base, _ref, _ref1, _ref2, _ref3;
      if (!(binding = (_ref = $view.attributes['data-bind']) != null ? _ref.value : void 0)) {
        return;
      }
      maps = binding.split('.');
      if (!(target_model = maps[0])) {
        return;
      }
      repeating = $view.attributes['data-repeat'] !== void 0;
      template_id = (_ref1 = $view.attributes['data-template']) != null ? _ref1.value : void 0;
      if (template_id !== void 0) {
        if (!(template = (_ref2 = document.getElementById(template_id)) != null ? _ref2.innerHTML : void 0)) {
          return;
        }
      } else {
        template = $view.outerHTML;
      }
      textbox = document.createElement('textarea');
      textbox.innerHTML = template;
      template = textbox.value;
      if (repeating) {
        view = new Wraith.RepeatingView($view.parentNode, $view.nodeName, template, binding);
      } else {
        view = new Wraith.View($view, template);
      }
      this.views.push(view);
      if ((_ref3 = (_base = this.bindings)[target_model]) == null) {
        _base[target_model] = [];
      }
      this.bindings[target_model].push({
        binding: binding,
        view: view
      });
      return this;
    };

    Controller.prototype.registerModel = function(as, model) {
      if (this.models[as]) {
        throw new Error('Model name already registered');
      }
      if (!model instanceof Wraith.Model) {
        throw new Error('Model is not valid');
      }
      this.models[as] = model;
      return this.bindViews(as, model);
    };

    Controller.prototype.bindViews = function(name, model) {
      var binding, bindings, map, mapping, view, _fn, _i, _len;
      if (!(bindings = this.bindings[name])) {
        return;
      }
      _fn = function(model, view, mapping) {
        if (view instanceof Wraith.RepeatingView) {
          if (mapping) {
            model.bind('add:' + mapping[1], function(model_) {
              return view.createView(model_);
            });
            return model.bind('remove:' + mapping[1], function(model_) {
              return view.removeView(model_);
            });
          }
        } else {
          if (mapping) {
            return model.bind('change:' + mapping[1], function(model_) {
              return view.createView(model_);
            });
          } else {
            return model.bind('change', function() {
              return view.createView(model);
            });
          }
        }
      };
      for (_i = 0, _len = bindings.length; _i < _len; _i++) {
        map = bindings[_i];
        binding = map.binding;
        view = map.view;
        mapping = binding.split('.');
        _fn(model, view, mapping);
      }
      return this;
    };

    return Controller;

  })(this.Wraith.Base);

}).call(this);
