// Generated by CoffeeScript 1.6.2
(function() {
  var Wraith, root,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Wraith = (function() {
    function Wraith() {}

    Wraith.DEBUG = true;

    Wraith.Controllers = [];

    Wraith.controllers = {};

    Wraith.Collections = {};

    Wraith.Models = {};

    Wraith.models = {};

    Wraith.UIEvents = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'scroll', 'keypress', 'keyup', 'keydown', 'change', 'blur', 'focus', 'submit'];

    Wraith.log = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (Wraith.DEBUG) {
        return console.log.apply(console, args);
      }
    };

    Wraith.isFunction = function(obj) {
      return Object.prototype.toString.call(obj) === '[object Function]';
    };

    Wraith.delay = function(ms, func) {
      return setTimeout(func, ms);
    };

    Wraith.objectTypes = {
      ARRAY: '[object Array]',
      STRING: '[object String]',
      FUNCTION: '[object Function]',
      OBJECT: '[object Object]'
    };

    Wraith.uniqueId = function(length, prefix) {
      var id;

      if (length == null) {
        length = 16;
      }
      if (prefix == null) {
        prefix = "wraith-";
      }
      id = "";
      while (id.length < length) {
        id += Math.random().toString(36).substr(2);
      }
      id.substr(0, length);
      return id = prefix + id;
    };

    return Wraith;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Wraith = Wraith;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Wraith.Bootloader = (function() {
    function Bootloader() {
      var $controller, controller, controllers, id, _i, _len, _ref;

      controllers = document.querySelectorAll('[data-controller]');
      for (_i = 0, _len = controllers.length; _i < _len; _i++) {
        $controller = controllers[_i];
        this.loadController($controller.attributes['data-controller'].value, $controller);
      }
      _ref = Wraith.controllers;
      for (id in _ref) {
        controller = _ref[id];
        controller.init();
      }
      this;
    }

    Bootloader.prototype.loadController = function(id, $item) {
      var Controller, controller, obj;

      obj = root;
      id.replace(/[^\.]+/g, function(m) {
        return obj = obj[m];
      });
      if (!(Controller = obj)) {
        throw 'Controller does not exist';
      }
      controller = new Controller($item);
      return Wraith.controllers[controller.id] = controller;
    };

    return Bootloader;

  })();

  Wraith.Base = (function() {
    function Base() {
      this.emit = __bind(this.emit, this);
      this.unbind = __bind(this.unbind, this);
      this.bind = __bind(this.bind, this);      this.id = Wraith.uniqueId();
      this.listeners = {};
    }

    Base.prototype.bind = function(ev, cb) {
      var list, _base, _ref;

      if (!Wraith.isFunction(cb)) {
        throw 'Callback is not a function';
      }
      list = (_ref = (_base = this.listeners)[ev]) != null ? _ref : _base[ev] = [];
      list.push(cb);
      return this;
    };

    Base.prototype.unbind = function(ev, cb) {
      var callback, i, list, _i, _len, _ref;

      list = (_ref = this.listeners) != null ? _ref[ev] : void 0;
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        callback = list[i];
        if (!(callback === cb)) {
          continue;
        }
        list.slice();
        list.splice(i, 1);
        this.listeners[ev] = list;
        break;
      }
      return this;
    };

    Base.prototype.emit = function() {
      var args, event, listener, _i, _len, _ref;

      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.listeners[event] != null) {
        _ref = this.listeners[event];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          listener.apply(null, args);
        }
      }
      return this;
    };

    Base.prototype.proxy = function(fn) {
      var _this = this;

      return function() {
        return fn.apply(_this, arguments);
      };
    };

    return Base;

  })();

  Wraith.Model = (function(_super) {
    __extends(Model, _super);

    Model.field = function(name, opt) {
      var _ref;

      if ((_ref = this.fields) == null) {
        this.fields = {};
      }
      return this.fields[name] = opt != null ? opt : {};
    };

    Model.hasMany = function(klass, as, opt) {
      var _ref, _ref1, _ref2;

      if (opt == null) {
        opt = {};
      }
      if ((_ref = opt.klass) == null) {
        opt.klass = klass;
      }
      if ((_ref1 = opt.as) == null) {
        opt.as = as;
      }
      if ((_ref2 = this.collections) == null) {
        this.collections = {};
      }
      return this.collections[as] = opt;
    };

    function Model(attributes) {
      this.toJSON = __bind(this.toJSON, this);
      this.set = __bind(this.set, this);
      this.get = __bind(this.get, this);
      var d, name, options, _base, _ref, _ref1, _ref2;

      Wraith.log('@Wraith.Model', 'constructor');
      Model.__super__.constructor.call(this);
      if ((_ref = (_base = this.constructor).fields) == null) {
        _base.fields = {};
      }
      if (!(attributes != null ? attributes['_id'] : void 0)) {
        this.constructor.fields['_id'] = {
          "default": Wraith.uniqueId
        };
      }
      this.listeners = {};
      this.attributes = {};
      _ref1 = this.constructor.fields;
      for (name in _ref1) {
        options = _ref1[name];
        if ((attributes != null ? attributes[name] : void 0) != null) {
          d = attributes[name];
        } else {
          d = Wraith.isFunction(options["default"]) ? options["default"]() : options["default"];
        }
        this.set(name, d);
      }
      _ref2 = this.constructor.collections;
      for (name in _ref2) {
        options = _ref2[name];
        this.attributes[name] = new Wraith.Collection(this, options.as, options.klass);
      }
      Wraith.models[this.attributes['_id']] = this;
      this;
    }

    Model.prototype.get = function(key) {
      var _ref;

      return (_ref = this.attributes) != null ? _ref[key] : void 0;
    };

    Model.prototype.set = function(key, val) {
      var field;

      if (!(field = this.constructor.fields[key])) {
        throw 'Trying to set an non-existent property!';
      }
      if (val === this.get(key)) {
        return;
      }
      this.attributes[key] = val;
      this.emit('change', key, val);
      return this.emit("change:" + key, val);
    };

    Model.prototype.toJSON = function() {
      return this.attributes;
    };

    return Model;

  })(Wraith.Base);

  Wraith.Collection = (function(_super) {
    __extends(Collection, _super);

    function Collection(parent, as, klass) {
      this.parent = parent;
      this.as = as;
      this.klass = klass;
      this.handleChange = __bind(this.handleChange, this);
      this.findById = __bind(this.findById, this);
      this.length = __bind(this.length, this);
      this.all = __bind(this.all, this);
      this.remove = __bind(this.remove, this);
      this.add = __bind(this.add, this);
      this.create = __bind(this.create, this);
      Wraith.log('@Wraith.Collection', 'constructor');
      Collection.__super__.constructor.call(this);
      this.members = [];
    }

    Collection.prototype.create = function(attr) {
      return this.add(new this.klass(attr));
    };

    Collection.prototype.add = function(item) {
      this.members.push(item);
      this.parent.emit('add:' + this.as, item);
      this.parent.emit('change:' + this.as, this);
      this.parent.emit('change', this);
      item.bind('change', item.proxy(this.handleChange));
      return item;
    };

    Collection.prototype.remove = function(id) {
      var i, item, _i, _len, _ref;

      _ref = this.members;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (!(item.get('_id') === id)) {
          continue;
        }
        this.members.splice(i, 1);
        this.parent.emit('remove:' + this.as, item);
        this.parent.emit('change:' + this.as, this);
        this.parent.emit('change', this);
        item.unbind('change', item.proxy(this.handleChange));
        return item;
      }
      return false;
    };

    Collection.prototype.all = function() {
      return this.members;
    };

    Collection.prototype.length = function() {
      return this.members.length;
    };

    Collection.prototype.findById = function(id) {
      var i, item, _i, _len, _ref;

      _ref = this.members;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (item.get('_id') === id) {
          return item;
        }
      }
    };

    Collection.prototype.handleChange = function(key, value) {
      return this.parent.emit('change', key, value);
    };

    return Collection;

  })(Wraith.Model);

  Wraith.Template = (function() {
    Template.cache = {};

    Template.escapeRegExp = function(string) {
      return string.replace(/([.*+?^${}()|[\]\/\\])/g, '\\$1');
    };

    Template.settings = {
      start: '{{',
      end: '}}',
      checked: /data-checked=[\'\"](.+?)[\'\"]/gi,
      classes: /data-class=[\'\"](.+?)[\'\"]/gi,
      classesMerge: /\bclass="(.+?)"([^<^>]*)class="(.+?)"/gi,
      interpolate: /{{(.+?)}}/g,
      dotNotation: '[a-z0-9_()][\\.a-z0-9_()]*'
    };

    function Template(template) {
      this.template = template;
      this.getType = __bind(this.getType, this);
      this;
    }

    Template.prototype.compile = function(data) {
      var c, endMatch, fn, str, template;

      if (this.template_fn) {
        return this.template_fn(data);
      }
      c = Wraith.Template.settings;
      template = this.template;
      endMatch = new RegExp("'(?=[^" + c.end.substr(0, 1) + "]*" + Wraith.Template.escapeRegExp(c.end) + ")", "g");
      str = 'var p=[],print=function(){p.push.apply(p,arguments);};' + 'p.push(\'' + template.replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/\t/g, '\\t').replace(endMatch, "✄").split("'").join("\\'").split("✄").join("'").replace(c.interpolate, "' + Wraith.Template.interpolate(obj, \'$1\') + '").replace(c.checked, "' + ((Wraith.Template.interpolate(obj, \'$1\') === true) ? 'checked' : \'\') + '").replace(c.classes, "class=\"' + Wraith.Template.interpolateClass(obj, \'$1\') + '\"").replace(c.classesMerge, "class=\"$1 $3\" $2").split(c.start).join("');").split(c.end).join("p.push('") + "'); return p.join('');";
      fn = new Function('obj', str);
      this.template_fn = fn;
      console.log(fn);
      return this.template_fn(data);
    };

    Template.prototype.getType = function(obj) {
      return obj != null ? obj.toString() : void 0;
    };

    Template.interpolate = function(model, tokens) {
      var count, results, target, token, _i, _len;

      count = 0;
      results = false;
      tokens = tokens.split('.');
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        token = tokens[_i];
        target = count === 0 ? model : results;
        if (target.hasOwnProperty(token)) {
          results = target[token];
        } else {
          results = target.get(token);
        }
        if (Wraith.isFunction(results)) {
          results = results();
        }
        count++;
      }
      return results;
    };

    Template.interpolateClass = function(model, tokens) {
      var binding, invert, klass, klassMap, klasses, results, _i, _len, _ref;

      klasses = [];
      _ref = tokens.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        klassMap = _ref[_i];
        binding = klassMap.split(':');
        if (binding.length !== 2) {
          continue;
        }
        klass = binding[0];
        tokens = binding[1];
        invert = tokens[0] === '!';
        if (invert) {
          tokens = tokens.slice(1);
        }
        results = Wraith.Template.interpolate(model, tokens);
        if (invert) {
          results = !results;
        }
        if (!results) {
          continue;
        }
        klasses.push(klass);
      }
      return klasses.join(' ');
    };

    return Template;

  }).call(this);

  Wraith.BaseView = (function(_super) {
    __extends(BaseView, _super);

    function BaseView($el) {
      this.$el = $el;
      this.unbindUIEvent = __bind(this.unbindUIEvent, this);
      this.unbindUIEvents = __bind(this.unbindUIEvents, this);
      this.handleUIEvent = __bind(this.handleUIEvent, this);
      this.wrapUIEvent = __bind(this.wrapUIEvent, this);
      this.bindUIEvent = __bind(this.bindUIEvent, this);
      this.bindUIEvents = __bind(this.bindUIEvents, this);
      this.applyClass = __bind(this.applyClass, this);
      this.applyClasses = __bind(this.applyClasses, this);
      this.resolveToken = __bind(this.resolveToken, this);
      if (!this.$el) {
        throw 'Element is required by View';
      }
      BaseView.__super__.constructor.call(this);
    }

    BaseView.prototype.resolveToken = function(tokens, model) {
      var count, results, target, token, _i, _len;

      count = 0;
      results = false;
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        token = tokens[_i];
        target = count === 0 ? model : results;
        if (target.hasOwnProperty(token)) {
          results = target[token];
        } else {
          results = target.get(token);
        }
        if (Wraith.isFunction(results)) {
          results = results();
        }
        count++;
      }
      return results;
    };

    BaseView.prototype.applyClasses = function($view, model) {
      var $el, els, _i, _len;

      return;
      els = $view.querySelectorAll('[data-class]');
      if ($view.attributes['data-class']) {
        this.applyClass($view, model);
      }
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        $el = els[_i];
        this.applyClass($el, model);
      }
      return this;
    };

    BaseView.prototype.applyClass = function($view, model) {
      var binding, invert, klass, klassMap, klasses, results, tokens, _i, _len, _ref, _ref1;

      klasses = $view.attributes['data-class'].value;
      _ref = klasses.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        klassMap = _ref[_i];
        binding = klassMap.split(':');
        if (binding.length !== 2) {
          continue;
        }
        klass = binding[0];
        tokens = binding[1];
        invert = tokens[0] === '!';
        if (invert) {
          tokens = tokens.slice(1);
        }
        results = this.resolveToken(tokens.split('.'), model);
        if (invert) {
          results = !results;
        }
        if (!results) {
          continue;
        }
        klasses = (_ref1 = $view.attributes['class']) != null ? _ref1.value : void 0;
        if (klasses) {
          if (klasses.split(' ').indexOf(klass) === -1) {
            klasses = klasses + ' ' + klass;
          }
        } else {
          klasses = klass;
        }
        $view.setAttribute('class', klasses);
      }
      return this;
    };

    BaseView.prototype.bindUIEvents = function($view) {
      var $el, els, _i, _len;

      els = $view.querySelectorAll('[data-events]');
      if ($view.attributes['data-events']) {
        this.bindUIEvent($view, $view.attributes['data-events'].value);
      }
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        $el = els[_i];
        this.bindUIEvent($el, $el.attributes['data-events'].value);
      }
      return this;
    };

    BaseView.prototype.bindUIEvent = function($view, event) {
      var cb, eventArr, events, name, _i, _len, _ref;

      events = event.split(/[,?\s?]/);
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        eventArr = event.split(':');
        if (eventArr.length !== 2) {
          continue;
        }
        name = eventArr[0];
        cb = eventArr[1];
        if (_ref = !name, __indexOf.call(Wraith.UIEvents, _ref) >= 0) {
          continue;
        }
        $view.addEventListener(name, this.wrapUIEvent(cb));
      }
      return this;
    };

    BaseView.prototype.wrapUIEvent = function(cb) {
      var _this = this;

      return function(e) {
        return _this.handleUIEvent(e, cb);
      };
    };

    BaseView.prototype.handleUIEvent = function(e, cb) {
      e.stopPropagation();
      return this.emit('uievent', e, cb);
    };

    BaseView.prototype.unbindUIEvents = function($view) {
      var $el, els, _i, _len;

      els = $view.querySelectorAll('[data-events]');
      if ($view.attributes['data-events']) {
        this.unbindUIEvent($view, $view.attributes['data-events'].value);
      }
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        $el = els[_i];
        this.unbindUIEvent($el, $el.attributes['data-events'].value);
      }
      return this;
    };

    BaseView.prototype.unbindUIEvent = function($view, event) {
      var cb, eventArr, events, name, _i, _len, _ref,
        _this = this;

      events = event.split(/[,?\s?]/);
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        eventArr = event.split(':');
        if (eventArr.length !== 2) {
          continue;
        }
        name = eventArr[0];
        cb = eventArr[1];
        if (_ref = !name, __indexOf.call(Wraith.UIEvents, _ref) >= 0) {
          continue;
        }
        $view.removeEventListener(name, function(e) {
          return _this.handleUIEvent(e, cb);
        });
      }
      return this;
    };

    return BaseView;

  })(Wraith.Base);

  Wraith.ViewModel = (function(_super) {
    __extends(ViewModel, _super);

    function ViewModel($el, template) {
      this.$el = $el;
      this.template = template;
      this.applyViewUpdate = __bind(this.applyViewUpdate, this);
      Wraith.log('@Wraith.ViewModel', 'constructor');
      if (!this.$el) {
        throw 'Element is required by View';
      }
      if (!this.template) {
        throw 'Template is required by View';
      }
      ViewModel.__super__.constructor.call(this, this.$el);
      this.$parent = this.$el.parentNode;
    }

    ViewModel.prototype.render = function(model) {
      var $el;

      $el = document.createElement('div');
      $el.innerHTML = new Wraith.Template(this.template).compile(model);
      $el = $el.firstChild;
      return $el;
    };

    ViewModel.prototype.compileTemplate = function(model, template) {
      return template.replace(Wraith.ViewModel.TEMPLATE_REGEX, function(tag, results) {
        var count, target, token, tokens, val, _i, _len;

        tokens = results.split('.');
        count = 0;
        for (_i = 0, _len = tokens.length; _i < _len; _i++) {
          token = tokens[_i];
          target = count === 0 ? model : val;
          if (target.hasOwnProperty(token)) {
            val = target[token];
          } else {
            val = target.get(token);
          }
          if (Wraith.isFunction(val)) {
            val = val();
          }
          count++;
        }
        return val;
      });
    };

    ViewModel.prototype.updateView = function(model) {
      var $view;

      this.unbindUIEvents(this.$el);
      $view = this.render(model);
      this.applyClasses($view, model);
      this.bindUIEvents($view);
      this.applyViewUpdate(this.$el, $view);
      return this;
    };

    ViewModel.prototype.applyViewUpdate = function($old, $new) {
      var $child, attr, attrs, i, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;

      attrs = [];
      if ($old.attributes) {
        attrs = (function() {
          var _i, _len, _ref, _results;

          _ref = $old.attributes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            attr = _ref[_i];
            _results.push(attr.name);
          }
          return _results;
        })();
      }
      if ($new.attributes) {
        _ref = $new.attributes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attr = _ref[_i];
          if (attrs.indexOf(attr.name) === -1) {
            attrs.push(attr.name);
          }
        }
      }
      for (_j = 0, _len1 = attrs.length; _j < _len1; _j++) {
        attr = attrs[_j];
        this.updateAttribute(attr, $old, $new);
      }
      if ($old.nodeValue !== $new.nodeValue) {
        $old.nodeValue = $new.nodeValue;
      }
      _ref1 = $old.childNodes;
      for (i = _k = 0, _len2 = _ref1.length; _k < _len2; i = ++_k) {
        $child = _ref1[i];
        this.applyViewUpdate($child, $new.childNodes[i]);
      }
      return this;
    };

    ViewModel.prototype.updateAttribute = function(name, $old, $new) {
      var newval, oldval, _ref, _ref1;

      oldval = (_ref = $old.attributes[name]) != null ? _ref.value : void 0;
      newval = (_ref1 = $new.attributes[name]) != null ? _ref1.value : void 0;
      if (oldval === newval) {
        return;
      }
      if (newval) {
        return $old.setAttribute(name, newval);
      } else {
        return $old.removeAttribute(name);
      }
    };

    return ViewModel;

  })(Wraith.BaseView);

  Wraith.CollectionView = (function(_super) {
    __extends(CollectionView, _super);

    function CollectionView($el, template) {
      this.$el = $el;
      this.template = template;
      Wraith.log('@Wraith.CollectionView', 'constructor');
      CollectionView.__super__.constructor.call(this, this.$el, this.template);
      this.$parent.innerHTML = '';
    }

    CollectionView.prototype.createView = function(model) {
      var $view;

      if (!(model instanceof Wraith.Model)) {
        return;
      }
      $view = this.render(model);
      $view.setAttribute('data-model', model.get('_id'));
      this.applyClasses($view, model);
      this.bindUIEvents($view);
      return this.$parent.appendChild($view);
    };

    CollectionView.prototype.removeView = function(model) {
      var $view;

      if (!(model instanceof Wraith.Model)) {
        return;
      }
      $view = this.$parent.querySelector('[data-model=' + model.get('_id') + ']');
      this.unbindUIEvents($view);
      return this.$parent.removeChild($view);
    };

    CollectionView.prototype.updateView = function(model) {
      var $el, $view;

      if (!($el = this.$parent.querySelector('[data-model=' + model.get('_id') + ']'))) {
        return;
      }
      $view = this.render(model);
      $view.setAttribute('data-model', model.get('_id'));
      this.applyClasses($view, model);
      this.unbindUIEvents($el);
      this.bindUIEvents($view);
      return this.applyViewUpdate($el, $view);
    };

    return CollectionView;

  })(Wraith.ViewModel);

  Wraith.Controller = (function(_super) {
    __extends(Controller, _super);

    function Controller($el) {
      this.$el = $el;
      this.getModelFromEl = __bind(this.getModelFromEl, this);
      this.handleViewUIEvent = __bind(this.handleViewUIEvent, this);
      this.handleUIEvent = __bind(this.handleUIEvent, this);
      Wraith.log('@Wraith.Controller', 'constructor');
      Controller.__super__.constructor.call(this, this.$el);
      this.$el.setAttribute('data-id', this.id);
      this.models = [];
      this.views = [];
      this.bindings = [];
      this.$els = {};
    }

    Controller.prototype.init = function() {
      Wraith.log('@Wraith.Controller', 'init');
      this.findViews();
      this.bindUIEvents(this.$el);
      return this.loadElements();
    };

    Controller.prototype.loadElements = function() {
      var $el, els, _i, _len;

      els = this.$el.querySelectorAll('[id]');
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        $el = els[_i];
        this.$els[$el.id] = $el;
      }
      return this;
    };

    Controller.prototype.findViews = function() {
      var $view, views, _i, _len;

      views = document.querySelectorAll('[data-bind]');
      for (_i = 0, _len = views.length; _i < _len; _i++) {
        $view = views[_i];
        this.registerView($view);
      }
      return this;
    };

    Controller.prototype.registerView = function($view) {
      var binding, maps, repeating, targetModel, template, templateId, textbox, view, _base, _ref, _ref1, _ref2, _ref3;

      if (!(binding = (_ref = $view.attributes['data-bind']) != null ? _ref.value : void 0)) {
        return;
      }
      maps = binding.split('.');
      if (!(targetModel = maps[0])) {
        return;
      }
      repeating = $view.attributes['data-repeat'] !== void 0;
      templateId = (_ref1 = $view.attributes['data-template']) != null ? _ref1.value : void 0;
      if (templateId !== void 0) {
        if (!(template = (_ref2 = document.getElementById(templateId)) != null ? _ref2.innerHTML : void 0)) {
          return;
        }
      } else {
        template = $view.outerHTML;
      }
      textbox = document.createElement('textarea');
      textbox.innerHTML = template;
      template = textbox.value;
      if (repeating) {
        view = new Wraith.CollectionView($view, template);
      } else {
        view = new Wraith.ViewModel($view, template);
      }
      view.bind('uievent', this.handleViewUIEvent);
      this.views.push(view);
      if ((_ref3 = (_base = this.bindings)[targetModel]) == null) {
        _base[targetModel] = [];
      }
      this.bindings[targetModel].push({
        binding: binding,
        view: view
      });
      return this;
    };

    Controller.prototype.registerModel = function(model, as) {
      if (this.models[as]) {
        throw 'Model name already registered';
      }
      if (!model instanceof Wraith.Model) {
        throw 'Model is not valid';
      }
      this.models[as] = model;
      this.bindViews(as, model);
      return model;
    };

    Controller.prototype.bindViews = function(name, model) {
      var bindings, map, _i, _len;

      if (!(bindings = this.bindings[name])) {
        return;
      }
      for (_i = 0, _len = bindings.length; _i < _len; _i++) {
        map = bindings[_i];
        this.bindView(model, map.binding, map.view);
      }
      return this;
    };

    Controller.prototype.bindView = function(model, binding, view) {
      var map, mapping;

      mapping = binding.split('.');
      map = mapping[1];
      if (map && view instanceof Wraith.CollectionView) {
        model.bind('add:' + map, function(model_) {
          view.createView(model_);
          return model_.bind('change', function() {
            return view.updateView(model_);
          });
        });
        return model.bind('remove:' + map, function(model_) {
          return view.removeView(model_);
        });
      } else if (map) {
        return model.bind('change:' + map, function(model_) {
          return view.updateView(model_);
        });
      } else {
        return model.bind('change', function() {
          return view.updateView(model);
        });
      }
    };

    Controller.prototype.handleUIEvent = function(e, cb) {
      if (!this[cb]) {
        throw "Callback " + cb + " not found on controller";
      }
      return this[cb](e);
    };

    Controller.prototype.handleViewUIEvent = function(e, cb) {
      if (!this[cb]) {
        throw "Callback " + cb + " not found on controller";
      }
      e.model = this.getModelFromEl(e.target);
      return this[cb](e);
    };

    Controller.prototype.getModelFromEl = function($el) {
      var modelId, _ref;

      while ($el) {
        if (!$el.attributes) {
          break;
        }
        if (modelId = (_ref = $el.attributes['data-model']) != null ? _ref.value : void 0) {
          break;
        }
        $el = $el.parentNode;
      }
      return Wraith.models[modelId];
    };

    return Controller;

  })(Wraith.BaseView);

}).call(this);
