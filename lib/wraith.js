// Generated by CoffeeScript 1.6.2
(function() {
  var root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  this.Wraith = {
    DEBUG: true,
    Controllers: [],
    controllers: {},
    Collections: {},
    Models: {},
    models: {},
    Templates: {},
    UIEvents: ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'scroll', 'keypress', 'keyup', 'keydown', 'change', 'blur', 'focus'],
    isFunction: function(obj) {
      return Object.prototype.toString.call(obj) === '[object Function]';
    },
    delay: function(ms, func) {
      return setTimeout(func, ms);
    },
    escapeRegExp: function(string) {
      return string.replace(/([.*+?^${}()|[\]\/\\])/g, '\\$1');
    },
    templateSettings: {
      start: '{{',
      end: '}}',
      interpolate: /{{(.+?)}}/g,
      checked: /data-checked=['"](.+?)['"]/g
    },
    compile: function(template) {
      var c, endMatch, fn;

      c = Wraith.templateSettings;
      endMatch = new RegExp("'(?=[^" + c.end.substr(0, 1) + "]*" + Wraith.escapeRegExp(c.end) + ")", "g");
      fn = new Function('obj', 'var p=[],print=function(){p.push.apply(p,arguments);};' + 'with(obj||{}){p.push(\'' + template.replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/\t/g, '\\t').replace(endMatch, "✄").split("'").join("\\'").split("✄").join("'").replace(c.interpolate, "' + ((hasOwnProperty('get') && get(\'$1\')) || $1) + '").replace(c.checked, "' + ((hasOwnProperty('get') && get(\'$1\') === true) ? 'checked' : \'\') + '").split(c.start).join("');").split(c.end).join("p.push('") + "');}return p.join('');");
      return fn;
    },
    uniqueId: function(length, prefix) {
      var id;

      if (length == null) {
        length = 16;
      }
      if (prefix == null) {
        prefix = "wraith-";
      }
      id = "";
      while (id.length < length) {
        id += Math.random().toString(36).substr(2);
      }
      id.substr(0, length);
      return id = prefix + id;
    }
  };

  this.Wraith.Bootloader = (function() {
    function Bootloader() {
      var $controller, controller, controllers, id, _i, _len, _ref;

      controllers = document.querySelectorAll('[data-controller]');
      for (_i = 0, _len = controllers.length; _i < _len; _i++) {
        $controller = controllers[_i];
        this.loadController($controller.attributes['data-controller'].value, $controller);
      }
      _ref = Wraith.controllers;
      for (id in _ref) {
        controller = _ref[id];
        controller.init();
      }
      this;
    }

    Bootloader.prototype.loadController = function(id, $item) {
      var Controller, controller;

      if (!(Controller = Wraith.Controllers[id])) {
        throw 'Controller does not exist';
      }
      controller = new Controller($item);
      return Wraith.controllers[controller.id] = controller;
    };

    return Bootloader;

  })();

  this.Wraith.Base = (function() {
    function Base() {
      this.emit = __bind(this.emit, this);
      this.unbind = __bind(this.unbind, this);
      this.bind = __bind(this.bind, this);      this.id = Wraith.uniqueId();
      this.listeners = {};
    }

    Base.prototype.bind = function(ev, cb) {
      var list, _base, _ref;

      if (!Wraith.isFunction(cb)) {
        throw 'Callback is not a function';
      }
      list = (_ref = (_base = this.listeners)[ev]) != null ? _ref : _base[ev] = [];
      list.push(cb);
      return this;
    };

    Base.prototype.unbind = function(ev, cb) {
      var callback, i, list, _i, _len, _ref;

      list = (_ref = this.listeners) != null ? _ref[ev] : void 0;
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        callback = list[i];
        if (!(callback === cb)) {
          continue;
        }
        list.slice();
        list.splice(i, 1);
        this.listeners[ev] = list;
        break;
      }
      return this;
    };

    Base.prototype.emit = function() {
      var args, event, listener, _i, _len, _ref;

      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.listeners[event] != null) {
        _ref = this.listeners[event];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          listener.apply(null, args);
        }
      }
      return this;
    };

    Base.proxy = function(func) {
      var _this = this;

      return function() {
        return func.apply(_this, arguments);
      };
    };

    Base.prototype.proxy = function(func) {
      var _this = this;

      return function() {
        return func.apply(_this, arguments);
      };
    };

    return Base;

  })();

  this.Wraith.Template = (function(_super) {
    __extends(Template, _super);

    function Template(template) {
      this.template = template;
      if (Wraith.DEBUG) {
        console.log('@Wraith.Template', 'constructor');
      }
      if (!this.template) {
        throw 'Template is required';
      }
      this.template_fn = Wraith.compile(this.template);
    }

    Template.prototype.render = function(data) {
      return this.template_fn(data);
    };

    return Template;

  })(this.Wraith.Base);

  this.Wraith.Model = (function(_super) {
    __extends(Model, _super);

    Model.field = function(name, opt) {
      var _ref;

      if ((_ref = this.fields) == null) {
        this.fields = {};
      }
      return this.fields[name] = opt != null ? opt : {};
    };

    Model.hasMany = function(klass, opt) {
      var _ref, _ref1;

      if (opt == null) {
        opt = {};
      }
      if ((_ref = opt.klass) == null) {
        opt.klass = klass;
      }
      if ((_ref1 = this.collections) == null) {
        this.collections = {};
      }
      return this.collections[opt.as] = opt;
    };

    function Model(attributes) {
      this.toJSON = __bind(this.toJSON, this);
      this.set = __bind(this.set, this);
      this.get = __bind(this.get, this);
      var d, name, options, _base, _ref, _ref1, _ref2;

      Model.__super__.constructor.call(this);
      if ((_ref = (_base = this.constructor).fields) == null) {
        _base.fields = {};
      }
      if (!(attributes != null ? attributes['_id'] : void 0)) {
        this.constructor.fields['_id'] = {
          "default": Wraith.uniqueId
        };
      }
      this.listeners = {};
      this.attributes = {};
      _ref1 = this.constructor.fields;
      for (name in _ref1) {
        options = _ref1[name];
        if ((attributes != null ? attributes[name] : void 0) != null) {
          d = attributes != null ? attributes[name] : void 0;
        } else {
          d = Wraith.isFunction(options["default"]) ? options["default"]() : options["default"];
        }
        this.set(name, d);
      }
      _ref2 = this.constructor.collections;
      for (name in _ref2) {
        options = _ref2[name];
        this.attributes[name] = new Wraith.Collection(this, options.as, options.klass);
      }
      Wraith.models[this.attributes['_id']] = this;
      this;
    }

    Model.prototype.get = function(key) {
      var _ref;

      return (_ref = this.attributes) != null ? _ref[key] : void 0;
    };

    Model.prototype.set = function(key, val) {
      var field;

      if (!(field = this.constructor.fields[key])) {
        throw 'Trying to set an non-existent property!';
      }
      if (val === this.get(key)) {
        return;
      }
      this.attributes[key] = val;
      this.emit('change', key, val);
      return this.emit("change:" + key, val);
    };

    Model.prototype.toJSON = function() {
      return this.attributes;
    };

    return Model;

  })(this.Wraith.Base);

  this.Wraith.Collection = (function(_super) {
    __extends(Collection, _super);

    function Collection(parent, as, klass) {
      this.parent = parent;
      this.as = as;
      this.klass = klass;
      this.handleChange = __bind(this.handleChange, this);
      this.findById = __bind(this.findById, this);
      this.at = __bind(this.at, this);
      this.length = __bind(this.length, this);
      this.all = __bind(this.all, this);
      this.remove = __bind(this.remove, this);
      this.add = __bind(this.add, this);
      this.create = __bind(this.create, this);
      Collection.__super__.constructor.call(this);
      this.members = [];
    }

    Collection.prototype.create = function(attr) {
      return this.add(new this.klass(attr));
    };

    Collection.prototype.add = function(item) {
      this.members.push(item);
      this.parent.emit('add:' + this.as, item);
      this.parent.emit('change:' + this.as, this);
      this.parent.emit('change', this);
      item.bind('change', item.proxy(this.handleChange));
      return item;
    };

    Collection.prototype.remove = function(id) {
      var i, item, _i, _len, _ref;

      _ref = this.members;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (!(item.get('_id') === id)) {
          continue;
        }
        this.members.splice(i, 1);
        this.parent.emit('remove:' + this.as, item);
        this.parent.emit('change:' + this.as, this);
        this.parent.emit('change', this);
        item.unbind('change', item.proxy(this.handleChange));
        break;
      }
      return this;
    };

    Collection.prototype.all = function() {
      return this.members;
    };

    Collection.prototype.length = function() {
      return this.members.length;
    };

    Collection.prototype.at = function(index) {
      return this.members[index];
    };

    Collection.prototype.findById = function(id) {
      var i, item, _i, _len, _ref;

      _ref = this.members;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (item.get('_id') === id) {
          return item;
        }
      }
    };

    Collection.prototype.handleChange = function(key, value) {
      return this.parent.emit('change', key, value);
    };

    return Collection;

  })(this.Wraith.Model);

  this.Wraith.View = (function(_super) {
    __extends(View, _super);

    function View($el) {
      this.$el = $el;
      this.bindTo = __bind(this.bindTo, this);
      this.bindEvents = __bind(this.bindEvents, this);
      if (Wraith.DEBUG) {
        console.log('@Wraith.View', 'constructor');
      }
      if (!this.$el) {
        throw 'Element is required by View';
      }
      View.__super__.constructor.call(this);
    }

    View.prototype.bindEvents = function($view) {
      var $el, els, _i, _len;

      if ($view.attributes['data-events']) {
        this.bindTo($view, $view.attributes['data-events'].value);
      }
      els = $view.querySelectorAll('[data-events]');
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        $el = els[_i];
        this.bindTo($el, $el.attributes['data-events'].value);
      }
      return this;
    };

    View.prototype.bindTo = function($view, event) {
      var cb, eventArr, events, name, _i, _len, _ref,
        _this = this;

      events = event.split(/[,?\s?]/);
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        eventArr = event.split(':');
        if (eventArr.length !== 2) {
          continue;
        }
        name = eventArr[0];
        cb = eventArr[1];
        if (_ref = !name, __indexOf.call(Wraith.UIEvents, _ref) >= 0) {
          continue;
        }
        $view.addEventListener(name, function(e) {
          return _this.handleUIEvent(e, cb);
        });
      }
      return this;
    };

    View.prototype.handleUIEvent = function(e, cb) {
      return this.emit('uievent', e, cb);
    };

    return View;

  })(this.Wraith.Base);

  this.Wraith.ViewModel = (function(_super) {
    __extends(ViewModel, _super);

    function ViewModel($el, template) {
      var _base, _name, _ref;

      this.$el = $el;
      this.template = template;
      if (Wraith.DEBUG) {
        console.log('@Wraith.View', 'constructor');
      }
      if (!this.$el) {
        throw 'Element is required by View';
      }
      if (!this.template) {
        throw 'Template is required by View';
      }
      ViewModel.__super__.constructor.call(this, this.$el);
      this.$parent = this.$el.parentNode;
      if ((_ref = (_base = Wraith.Templates)[_name = this.template]) == null) {
        _base[_name] = new Wraith.Template(template);
      }
      this.Template = Wraith.Templates[this.template];
    }

    ViewModel.prototype.render = function(model) {
      var $el, rendered;

      rendered = this.Template.render(model);
      $el = document.createElement('div');
      $el.innerHTML = rendered;
      $el = $el.firstChild;
      return $el;
    };

    ViewModel.prototype.updateView = function(model) {
      var $view;

      $view = this.render(model);
      this.$parent.replaceChild($view, this.$el);
      this.$el = $view;
      this.$el.setAttribute('data-model', model.get('_id'));
      return this.bindEvents($view);
    };

    return ViewModel;

  })(this.Wraith.View);

  this.Wraith.CollectionView = (function(_super) {
    __extends(CollectionView, _super);

    function CollectionView($el, template) {
      this.$el = $el;
      this.template = template;
      if (Wraith.DEBUG) {
        console.log('@Wraith.CollectionView', 'constructor');
      }
      CollectionView.__super__.constructor.call(this, this.$el, this.template);
      this.$parent.innerHTML = '';
    }

    CollectionView.prototype.createView = function(model) {
      var $el, $node;

      if (!(model instanceof Wraith.Model)) {
        return;
      }
      $el = this.render(model);
      if (!($node = $el)) {
        return;
      }
      $node.setAttribute('data-id', Wraith.uniqueId());
      $node.setAttribute('data-model', model.get('_id'));
      this.$parent.appendChild($el);
      return this.bindEvents($el);
    };

    CollectionView.prototype.removeView = function(model) {
      var $el;

      if (!(model instanceof Wraith.Model)) {
        return;
      }
      $el = this.$parent.querySelector('[data-model=' + model.get('_id') + ']');
      return this.$parent.removeChild($el);
    };

    CollectionView.prototype.updateView = function(model) {
      var $el, $node, $oldView;

      if (!($oldView = this.$parent.querySelector('[data-model=' + model.get('_id') + ']'))) {
        return;
      }
      $el = this.render(model);
      if (!($node = $el)) {
        return;
      }
      $node.setAttribute('data-id', Wraith.uniqueId());
      $node.setAttribute('data-model', model.get('_id'));
      this.$parent.replaceChild($node, $oldView);
      return this.bindEvents($node);
    };

    return CollectionView;

  })(this.Wraith.ViewModel);

  this.Wraith.Controller = (function(_super) {
    __extends(Controller, _super);

    function Controller($el) {
      this.$el = $el;
      this.getModelFromEl = __bind(this.getModelFromEl, this);
      this.handleViewUIEvent = __bind(this.handleViewUIEvent, this);
      this.handleUIEvent = __bind(this.handleUIEvent, this);
      if (Wraith.DEBUG) {
        console.log('@Wraith.Controller', 'constructor');
      }
      Controller.__super__.constructor.call(this, this.$el);
      this.$el.setAttribute('data-id', this.id);
      this.models = [];
      this.views = [];
      this.bindings = [];
    }

    Controller.prototype.init = function() {
      if (Wraith.DEBUG) {
        console.log('@Wraith.Controller', 'init');
      }
      this.findViews();
      return this.bindEvents(this.$el);
    };

    Controller.prototype.findViews = function() {
      var $view, views, _i, _len;

      views = document.querySelectorAll('[data-bind]');
      for (_i = 0, _len = views.length; _i < _len; _i++) {
        $view = views[_i];
        this.registerView($view);
      }
      return this;
    };

    Controller.prototype.registerView = function($view) {
      var binding, maps, repeating, targetModel, template, templateId, textbox, view, _base, _ref, _ref1, _ref2, _ref3;

      if (!(binding = (_ref = $view.attributes['data-bind']) != null ? _ref.value : void 0)) {
        return;
      }
      maps = binding.split('.');
      if (!(targetModel = maps[0])) {
        return;
      }
      repeating = $view.attributes['data-repeat'] !== void 0;
      templateId = (_ref1 = $view.attributes['data-template']) != null ? _ref1.value : void 0;
      if (templateId !== void 0) {
        if (!(template = (_ref2 = document.getElementById(templateId)) != null ? _ref2.innerHTML : void 0)) {
          return;
        }
      } else {
        template = $view.outerHTML;
      }
      textbox = document.createElement('textarea');
      textbox.innerHTML = template;
      template = textbox.value;
      if (repeating) {
        view = new Wraith.CollectionView($view, template);
      } else {
        view = new Wraith.ViewModel($view, template);
      }
      view.bind('uievent', this.handleViewUIEvent);
      this.views.push(view);
      if ((_ref3 = (_base = this.bindings)[targetModel]) == null) {
        _base[targetModel] = [];
      }
      this.bindings[targetModel].push({
        binding: binding,
        view: view
      });
      return this;
    };

    Controller.prototype.registerModel = function(model, as) {
      if (this.models[as]) {
        throw 'Model name already registered';
      }
      if (!model instanceof Wraith.Model) {
        throw 'Model is not valid';
      }
      this.models[as] = model;
      this.bindViews(as, model);
      return model;
    };

    Controller.prototype.bindViews = function(name, model) {
      var bindings, map, _i, _len;

      if (!(bindings = this.bindings[name])) {
        return;
      }
      for (_i = 0, _len = bindings.length; _i < _len; _i++) {
        map = bindings[_i];
        this.bindView(model, map.binding, map.view);
      }
      return this;
    };

    Controller.prototype.bindView = function(model, binding, view) {
      var map, mapping;

      mapping = binding.split('.');
      map = mapping[1];
      if (map && view instanceof Wraith.CollectionView) {
        model.bind('add:' + map, function(model_) {
          view.createView(model_);
          return model_.bind('change', function() {
            return view.updateView(model_);
          });
        });
        return model.bind('remove:' + map, function(model_) {
          return view.removeView(model_);
        });
      } else if (map) {
        return model.bind('change:' + map, function(model_) {
          return view.updateView(model_);
        });
      } else {
        return model.bind('change', function() {
          return view.updateView(model);
        });
      }
    };

    Controller.prototype.handleUIEvent = function(e, cb) {
      return typeof this[cb] === "function" ? this[cb](e) : void 0;
    };

    Controller.prototype.handleViewUIEvent = function(e, cb) {
      e.model = this.getModelFromEl(e.target);
      return typeof this[cb] === "function" ? this[cb](e) : void 0;
    };

    Controller.prototype.getModelFromEl = function($el) {
      var modelId, _ref;

      while ($el) {
        if (modelId = (_ref = $el.attributes['data-model']) != null ? _ref.value : void 0) {
          break;
        }
        $el = $el.parentNode;
      }
      return Wraith.models[modelId];
    };

    return Controller;

  })(this.Wraith.View);

}).call(this);
