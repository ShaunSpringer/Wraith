// Generated by CoffeeScript 1.4.0
(function() {
  var root,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  this.Wraith = {
    Controllers: [],
    Collections: [],
    Models: [],
    Templates: [],
    Views: [],
    isFunction: function(obj) {
      return Object.prototype.toString.call(obj) === '[object Function]';
    }
  };

  this.Wraith.Bootloader = (function() {

    function Bootloader() {
      var self;
      self = this;
      $('script[type="text/template"]').forEach(function(item) {
        return self.loadTemplate($(item));
      });
      $('[data-controller]').forEach(function(item) {
        return self.loadController($(item).data('controller'), $(item));
      });
    }

    Bootloader.prototype.loadController = function(id, $item) {
      var Controller, controller;
      if (!(Controller = Wraith.Controllers[id])) {
        throw Error('Controller does not exist');
      }
      return controller = new Controller($item);
    };

    Bootloader.prototype.loadTemplate = function($template) {
      var Model, id, model, template;
      if (!$template) {
        throw Error('Template is invalid');
      }
      if (!(model = $template.data('model'))) {
        throw Error('Model attribute is invalid');
      }
      if (!(Model = Wraith.Models[model])) {
        throw Error('Model is invalid');
      }
      id = $template.attr('id');
      template = $template.html();
      return Wraith.Views[id] = new Wraith.View(template, Model);
    };

    return Bootloader;

  })();

  this.Wraith.Base = (function() {

    function Base() {
      this.listeners = {};
    }

    Base.prototype.bind = function(ev, cb) {
      var list, _base, _ref;
      list = (_ref = (_base = this.listeners)[ev]) != null ? _ref : _base[ev] = [];
      list.push(cb);
      return this;
    };

    Base.prototype.unbind = function(ev, cb) {
      var callback, i, list, _i, _len, _ref;
      list = (_ref = this.listeners) != null ? _ref[ev] : void 0;
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        callback = list[i];
        if (!(callback === cb)) {
          continue;
        }
        list.slice();
        list.splice(i, 1);
        this.listeners[ev] = list;
        break;
      }
      return this;
    };

    Base.prototype.emit = function() {
      var args, event, listener, _i, _len, _ref, _results;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.listeners[event]) {
        _ref = this.listeners[event];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          _results.push(listener.apply(null, args));
        }
        return _results;
      }
    };

    Base.proxy = function(func) {
      var _this = this;
      return function() {
        return func.apply(_this, arguments);
      };
    };

    Base.prototype.proxy = function(func) {
      var _this = this;
      return function() {
        return func.apply(_this, arguments);
      };
    };

    return Base;

  })();

  this.Wraith.Validator = (function() {

    function Validator() {}

    Validator.STRING = 'string';

    Validator.is = function(obj, type) {
      if (typeof obj === type || obj instanceof type) {
        return true;
      }
      return false;
    };

    Validator.isString = function(obj) {
      return this.is(obj, this.STRING);
    };

    return Validator;

  })();

  this.Wraith.Collection = (function(_super) {

    __extends(Collection, _super);

    function Collection(parent, as, klass) {
      this.parent = parent;
      this.as = as;
      this.klass = klass;
      this.at = __bind(this.at, this);

      this.length = __bind(this.length, this);

      this.all = __bind(this.all, this);

      this.remove = __bind(this.remove, this);

      this.add = __bind(this.add, this);

      this.create = __bind(this.create, this);

      this.members = [];
    }

    Collection.prototype.create = function(attr) {
      return this.add(new this.klass(attr));
    };

    Collection.prototype.add = function(item) {
      this.members.push(item);
      this.parent.emit('add:#{@as}', item);
      return item;
    };

    Collection.prototype.remove = function(item) {
      var i, t, _i, _len, _ref, _results;
      _ref = this.members;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        t = _ref[i];
        if (!(t === thing)) {
          continue;
        }
        delete this.members[i];
        this.parent.emit('remove:#{@as}', thing);
        break;
      }
      return _results;
    };

    Collection.prototype.all = function() {
      return this.members;
    };

    Collection.prototype.length = function() {
      return this.members.length;
    };

    Collection.prototype.at = function(index) {
      return this.members[index];
    };

    return Collection;

  })(Wraith.Base);

  this.Wraith.Model = (function(_super) {

    __extends(Model, _super);

    Model.field = function(name, opt) {
      var _ref;
      if ((_ref = this.fields) == null) {
        this.fields = {};
      }
      return this.fields[name] = typeof options !== "undefined" && options !== null ? options : {};
    };

    Model.hasMany = function(klass, options) {
      var _ref, _ref1;
      if (options == null) {
        options = {};
      }
      if ((_ref = options.klass) == null) {
        options.klass = klass;
      }
      if ((_ref1 = this.collections) == null) {
        this.collections = {};
      }
      return this.collections[options.as] = options;
    };

    function Model(attributes) {
      this.set = __bind(this.set, this);

      this.get = __bind(this.get, this);

      var d, name, options, _ref, _ref1;
      Model.__super__.constructor.call(this);
      this.listeners = {};
      this.attributes = {};
      _ref = this.constructor.fields;
      for (name in _ref) {
        options = _ref[name];
        if ((attributes != null ? attributes[name] : void 0) != null) {
          d = attributes != null ? attributes[name] : void 0;
        } else {
          d = Wraith.isFunction(options["default"]) ? options["default"]() : options["default"];
        }
        this.set(name, d);
      }
      _ref1 = this.constructor.collections;
      for (name in _ref1) {
        options = _ref1[name];
        this[name] = new Wraith.Collection(this, options.as, options.klass);
      }
    }

    Model.prototype.get = function(key) {
      var _ref;
      return (_ref = this.attributes) != null ? _ref[key] : void 0;
    };

    Model.prototype.set = function(key, val) {
      var field;
      console.log(key, val);
      field = this.constructor.fields[key];
      if (!field) {
        throw Error('Trying to set an non-existent property!');
      }
      if (val === this.get(key)) {
        return;
      }
      this.attributes[key] = val;
      this.emit('change', key, val);
      return this.emit("change:" + key, val);
    };

    return Model;

  })(Wraith.Base);

  this.Wraith.View = (function(_super) {

    __extends(View, _super);

    function View(template, Model) {
      this.template = template;
      this.Model = Model;
      this.change = __bind(this.change, this);

      if (!this.template) {
        throw Error('Template is required');
      }
      if (!this.Model) {
        throw Error('Model is required');
      }
      this.Model.bind('change', this.proxy(this.change));
    }

    View.prototype.change = function(data) {
      return console.log(data);
    };

    return View;

  })(Wraith.Base);

  this.Wraith.Controller = (function(_super) {

    __extends(Controller, _super);

    function Controller($el) {
      this.$el = $el;
      this.append = __bind(this.append, this);

      Controller.__super__.constructor.call(this);
      this.init();
    }

    Controller.prototype.init = function() {};

    Controller.prototype.append = function($item) {
      return this.$el.append($item);
    };

    return Controller;

  })(Wraith.Base);

}).call(this);
