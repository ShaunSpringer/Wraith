// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.Wraith.View = (function(_super) {

    __extends(View, _super);

    function View($el) {
      this.$el = $el;
      this.bindTo = __bind(this.bindTo, this);

      this.bindEvents = __bind(this.bindEvents, this);

      if (Wraith.DEBUG) {
        console.log('@Wraith.View', 'constructor');
      }
      if (!this.$el) {
        throw 'Element is required by View';
      }
      View.__super__.constructor.call(this);
    }

    View.prototype.bindEvents = function($view) {
      var $el, els, _i, _len;
      if ($view.attributes['data-events']) {
        this.bindTo($view, $view.attributes['data-events'].value);
      }
      els = $view.querySelectorAll('[data-events]');
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        $el = els[_i];
        this.bindTo($el, $el.attributes['data-events'].value);
      }
      return this;
    };

    View.prototype.bindTo = function($view, event) {
      var cb, eventArr, events, name, _i, _len, _ref,
        _this = this;
      events = event.split(/[,?\s?]/);
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        eventArr = event.split(':');
        if (eventArr.length !== 2) {
          continue;
        }
        name = eventArr[0];
        cb = eventArr[1];
        if (_ref = !name, __indexOf.call(Wraith.UIEvents, _ref) >= 0) {
          continue;
        }
        $view.addEventListener(name, function(e) {
          return _this.handleUIEvent(e, cb);
        });
      }
      return this;
    };

    View.prototype.handleUIEvent = function(e, cb) {
      return this.emit('uievent', e, cb);
    };

    return View;

  })(this.Wraith.Base);

}).call(this);
