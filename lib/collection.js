// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Wraith.Collection = (function(_super) {

    __extends(Collection, _super);

    function Collection(parent, as, klass) {
      this.parent = parent;
      this.as = as;
      this.klass = klass;
      this.handleChange = __bind(this.handleChange, this);

      this.findById = __bind(this.findById, this);

      this.at = __bind(this.at, this);

      this.length = __bind(this.length, this);

      this.all = __bind(this.all, this);

      this.remove = __bind(this.remove, this);

      this.add = __bind(this.add, this);

      this.create = __bind(this.create, this);

      Collection.__super__.constructor.call(this);
      this.members = [];
    }

    Collection.prototype.create = function(attr) {
      return this.add(new this.klass(attr));
    };

    Collection.prototype.add = function(item) {
      this.members.push(item);
      this.parent.emit('add:' + this.as, item);
      this.parent.emit('change:' + this.as, this);
      this.parent.emit('change', this);
      item.bind('change', item.proxy(this.handleChange));
      return item;
    };

    Collection.prototype.remove = function(id) {
      var i, item, _i, _len, _ref;
      _ref = this.members;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (!(item.get('_id') === id)) {
          continue;
        }
        this.members.splice(i, 1);
        this.parent.emit('remove:' + this.as, item);
        this.parent.emit('change:' + this.as, this);
        this.parent.emit('change', this);
        item.unbind('change', item.proxy(this.handleChange));
        break;
      }
      return this;
    };

    Collection.prototype.all = function() {
      return this.members;
    };

    Collection.prototype.length = function() {
      return this.members.length;
    };

    Collection.prototype.at = function(index) {
      return this.members[index];
    };

    Collection.prototype.findById = function(id) {
      var i, item, _i, _len, _ref;
      _ref = this.members;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (item.get('_id') === id) {
          return item;
        }
      }
    };

    Collection.prototype.handleChange = function(key, value) {
      return this.parent.emit('change', key, value);
    };

    return Collection;

  })(this.Wraith.Model);

}).call(this);
